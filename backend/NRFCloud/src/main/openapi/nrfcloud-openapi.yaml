components:
  examples: {}
  headers: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas:
    TenantId:
      type: string
      example: a5592ec1-18ae-4d9d-bc44-1d9bd927bbe9
      description: The UUID of the team owning the device(s)
      pattern: ^[a-f0-9]{8}-?[a-f0-9]{4}-?[a-f0-9]{4}-?[a-f0-9]{4}-?[a-f0-9]{12}$
    TenantUserRole:
      enum:
        - owner
        - admin
        - editor
        - viewer
      type: string
    Nominal_string.DeviceTag_:
      type: string
    DeviceTag:
      $ref: '#/components/schemas/Nominal_string.DeviceTag_'
      pattern: ^[a-zA-Z0-9_.@:#-]+$
    Extract_PlanTypes.DEVELOPER_:
      type: string
      enum:
        - DEVELOPER
      nullable: false
      description: Extract from T those types that are assignable to U
    ApiLimitsDocumentModel:
      properties:
        devices:
          type: number
          format: double
        monthlyFOTAJobExecutions:
          type: number
          format: double
        monthlyStoredDeviceMessages:
          type: number
          format: double
        monthlyLocationServiceRequests:
          type: number
          format: double
      required:
        - devices
        - monthlyFOTAJobExecutions
        - monthlyStoredDeviceMessages
        - monthlyLocationServiceRequests
      type: object
      additionalProperties: false
      example:
        devices: 10
        monthlyLocationServiceRequests: 500
        monthlyFOTAJobExecutions: 50
        monthlyStoredDeviceMessages: 3000
    GPSLocationServices:
      type: string
      enum:
        - AGPS
        - PGPS
    GroundFixLocationServices:
      type: string
      enum:
        - SCELL
        - MCELL
        - WIFI
    LocationServices:
      anyOf:
        - $ref: '#/components/schemas/GPSLocationServices'
        - $ref: '#/components/schemas/GroundFixLocationServices'
    NonLocationServices:
      type: string
      enum:
        - Devices
        - FOTA
        - Messages
    CommercialServices:
      anyOf:
        - $ref: '#/components/schemas/LocationServices'
        - $ref: '#/components/schemas/NonLocationServices'
    GroundFixLocationService:
      type: string
      enum:
        - GROUND_FIX
      nullable: false
    Pick_InvoiceLineItemNonOverage.Exclude_keyofInvoiceLineItemNonOverage.type__:
      properties:
        serviceId:
          anyOf:
            - $ref: '#/components/schemas/CommercialServices'
            - $ref: '#/components/schemas/GroundFixLocationService'
            - type: string
              enum:
                - All Services
                - VAT
        serviceDescription:
          type: string
        quantity:
          type: number
          format: double
        price:
          type: number
          format: double
        total:
          type: number
          format: double
      required:
        - serviceId
        - serviceDescription
        - quantity
        - price
        - total
      type: object
      description: From T, pick a set of properties whose keys are in the union K
    Omit_InvoiceLineItemNonOverage.type_:
      $ref: '#/components/schemas/Pick_InvoiceLineItemNonOverage.Exclude_keyofInvoiceLineItemNonOverage.type__'
    DeveloperPlan:
      properties:
        currentMonthCosts:
          items:
            $ref: '#/components/schemas/Omit_InvoiceLineItemNonOverage.type_'
          type: array
        currentMonthTotalCost:
          type: number
          format: double
        name:
          $ref: '#/components/schemas/Extract_PlanTypes.DEVELOPER_'
        limits:
          $ref: '#/components/schemas/ApiLimitsDocumentModel'
      required:
        - name
        - limits
      type: object
      additionalProperties: false
    Pick_PlanTypes.Exclude_keyofPlanTypes.DEVELOPER__:
      properties:
        length:
          type: number
          format: double
          description: Returns the length of a String object.
      required:
        - length
      type: object
      description: From T, pick a set of properties whose keys are in the union K
    Omit_PlanTypes.DEVELOPER_:
      $ref: '#/components/schemas/Pick_PlanTypes.Exclude_keyofPlanTypes.DEVELOPER__'
    ProxyUsageDeclarations:
      properties:
        AGPS:
          type: number
          format: double
        PGPS:
          type: number
          format: double
        GROUND_FIX:
          type: number
          format: double
      type: object
      additionalProperties: false
    LegacyServiceKeyType: {}
    ServiceKeyType:
      anyOf:
        - $ref: '#/components/schemas/LegacyServiceKeyType'
        - type: string
          enum:
            - ALL
    ServiceKeyInfo:
      properties:
        createdAt:
          type: string
        service:
          $ref: '#/components/schemas/ServiceKeyType'
        enabled:
          type: boolean
        updatedAt:
          type: string
      required:
        - createdAt
        - service
        - enabled
      type: object
      additionalProperties: false
    ProOrHigherPlan:
      properties:
        currentMonthCosts:
          items:
            $ref: '#/components/schemas/Omit_InvoiceLineItemNonOverage.type_'
          type: array
        currentMonthTotalCost:
          type: number
          format: double
        name:
          $ref: '#/components/schemas/Omit_PlanTypes.DEVELOPER_'
        proxyUsageDeclarations:
          $ref: '#/components/schemas/ProxyUsageDeclarations'
        serviceKeys:
          items:
            $ref: '#/components/schemas/ServiceKeyInfo'
          type: array
      required:
        - name
        - proxyUsageDeclarations
      type: object
      additionalProperties: false
    Extract_PlanTypes.ENTERPRISE_:
      type: string
      enum:
        - ENTERPRISE
      nullable: false
      description: Extract from T those types that are assignable to U
    OverageC2CBase:
      properties:
        AGPS:
          type: number
          format: double
        PGPS:
          type: number
          format: double
        GROUND_FIX:
          type: number
          format: double
      type: object
    C2COverages:
      allOf:
        - $ref: '#/components/schemas/OverageC2CBase'
        - properties:
            type:
              type: string
              enum:
                - C2C
              nullable: false
          required:
            - type
          type: object
    OverageD2CBase:
      properties:
        AGPS:
          type: number
          format: double
        PGPS:
          type: number
          format: double
        SCELL:
          type: number
          format: double
        MCELL:
          type: number
          format: double
        WIFI:
          type: number
          format: double
      type: object
    D2COverages:
      allOf:
        - $ref: '#/components/schemas/OverageD2CBase'
        - properties:
            type:
              type: string
              enum:
                - D2C
              nullable: false
          required:
            - type
          type: object
    Overages:
      anyOf:
        - $ref: '#/components/schemas/C2COverages'
        - $ref: '#/components/schemas/D2COverages'
    EnterprisePerDeviceBillingModelPlan:
      properties:
        currentMonthCosts:
          items:
            $ref: '#/components/schemas/Omit_InvoiceLineItemNonOverage.type_'
          type: array
        currentMonthTotalCost:
          type: number
          format: double
        name:
          $ref: '#/components/schemas/Extract_PlanTypes.ENTERPRISE_'
        proxyUsageDeclarations:
          $ref: '#/components/schemas/ProxyUsageDeclarations'
        serviceKeys:
          items:
            $ref: '#/components/schemas/ServiceKeyInfo'
          type: array
        overages:
          $ref: '#/components/schemas/Overages'
      required:
        - name
        - proxyUsageDeclarations
        - overages
      type: object
      additionalProperties: false
    AccountInfoArgs:
      description: Describes general info for this user in this team
      properties:
        mqttEndpoint:
          type: string
          description: The MQTT endpoint to connect to
          example: mqtt.nrfcloud.com
        mqttTopicPrefix:
          type: string
          description: The global prefix for all topics
          example: prod/a5592ec1-18ae-4d9d-bc44-1d9bd927bbe9/
        team:
          properties:
            name:
              type: string
              description: The user-defined friendly name of the team
              example: My Team 1
            tenantId:
              $ref: '#/components/schemas/TenantId'
              description: The UUID of the team owning the device(s)
              example: a5592ec1-18ae-4d9d-bc44-1d9bd927bbe9
          required:
            - tenantId
          type: object
          description: Information about your team that owns the devices accessible by your API key
        role:
          $ref: '#/components/schemas/TenantUserRole'
          description: Your role on the team, defining your permitted actions and device access
          example: editor
        tags:
          items:
            $ref: '#/components/schemas/DeviceTag'
          type: array
          description: |-
            Your assigned list of device tags (device groups in the nrfcloud.com UI).
            You can access devices that have any of these tags assigned, and devices that have no tags assigned.
          example:
            - warehouse-east
            - temperature
        plan:
          anyOf:
            - $ref: '#/components/schemas/DeveloperPlan'
            - $ref: '#/components/schemas/ProOrHigherPlan'
            - $ref: '#/components/schemas/EnterprisePerDeviceBillingModelPlan'
      required:
        - mqttEndpoint
        - mqttTopicPrefix
        - team
        - role
        - plan
      type: object
      additionalProperties: false
    Nominal_string.YearMonthValue_:
      type: string
    YearMonth:
      $ref: '#/components/schemas/Nominal_string.YearMonthValue_'
      example: 2022-04
      pattern: ^(20\d{2}-(0[1-9]|1[0-2]))$
    InvoiceStatusEvents:
      type: string
      enum:
        - PAID
        - CHARGEPENDING
        - CHARGEFAILED
    Nominal_string.CurrencyCode_:
      type: string
    CurrencyCode:
      $ref: '#/components/schemas/Nominal_string.CurrencyCode_'
    InvoiceResponse:
      properties:
        invoiceId:
          $ref: '#/components/schemas/YearMonth'
        total:
          type: number
          format: double
          example: 100
        url:
          type: string
          example: https://invoices.nrfcloud.com/<tenantId>/<filename>.pdf
        status:
          $ref: '#/components/schemas/InvoiceStatusEvents'
          example: PAID
        statusUpdatedAt:
          type: string
          example: '2023-03-03T20:31:18.844Z'
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
          example: USD
        paymentId:
          type: string
          example: '123456'
        amountFormatted:
          type: string
          example: $1,234.56
      required:
        - invoiceId
        - total
        - url
        - status
        - currencyCode
        - amountFormatted
      type: object
      additionalProperties: false
    PaginatedResult_InvoiceResponse_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/InvoiceResponse'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    PageLimit:
      type: integer
      format: int32
      default: '10'
      description: Maximum number of items you want returned in the response (<=100).
      minimum: 1
      maximum: 100
    PageNextToken:
      type: string
      example: 4bb1f9ab35bd
      description: |-
        If available in the initial response, use this token to retrieve the next page of items in the list.
        When supplying as a request parameter, use URL-encoding.
    Nominal_string.YearMonthDayValue_:
      type: string
    YearMonthDay:
      $ref: '#/components/schemas/Nominal_string.YearMonthDayValue_'
      example: '2022-04-30'
      pattern: ^(20\d{2}-(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1]))$
    UsageMetricDate:
      anyOf:
        - $ref: '#/components/schemas/YearMonth'
        - $ref: '#/components/schemas/YearMonthDay'
      example: 2021-08
    Service:
      enum:
        - LOCATION
        - FOTA
        - MESSAGES
        - IDENTITY
        - PROVISIONING
      type: string
    FirmwareTypes:
      description: |-
        Firmware types that can be specified in the device's shadow in reported.device.serviceInfo.fota_v2 and
        in its Elasticsearch document in the firmware.supports array.
      enum:
        - APP
        - MODEM
        - BOOT
        - SOFTDEVICE
        - BOOTLOADER
        - MDM_FULL
      type: string
    LocationServiceType:
      enum:
        - AGPS_EVAL
        - AGPS
        - MCELL_EVAL
        - MCELL
        - LOCATION
        - PGPS_EVAL
        - PGPS
        - REVERSE_GEO
        - SCELL_EVAL
        - SCELL
        - WIFI_EVAL
        - WIFI
      type: string
    MessagesServiceType:
      enum:
        - MESSAGES
      type: string
    IdentityServiceType:
      enum:
        - VERIFY_TOKEN
      type: string
    ProvisioningServiceType:
      enum:
        - SIGN_OWNERSHIP_KEY
      type: string
    ServiceTypeValue:
      anyOf:
        - $ref: '#/components/schemas/FirmwareTypes'
        - $ref: '#/components/schemas/LocationServiceType'
        - $ref: '#/components/schemas/MessagesServiceType'
        - $ref: '#/components/schemas/IdentityServiceType'
        - $ref: '#/components/schemas/ProvisioningServiceType'
      example: MCELL
    MetricSource:
      enum:
        - REST
        - MQTT
        - UNIQUE_DEVICES
        - GRAPHQL
        - ANY
      type: string
    Pick_ApiUsageMetricRecord.Exclude_keyofApiUsageMetricRecord.tenantId__:
      properties:
        date:
          $ref: '#/components/schemas/UsageMetricDate'
        service:
          $ref: '#/components/schemas/Service'
        serviceType:
          $ref: '#/components/schemas/ServiceTypeValue'
        source:
          $ref: '#/components/schemas/MetricSource'
          example: REST
        sum:
          type: number
          format: double
          example: 12
      required:
        - service
        - sum
      type: object
      description: From T, pick a set of properties whose keys are in the union K
    Omit_ApiUsageMetricRecord.tenantId_:
      $ref: '#/components/schemas/Pick_ApiUsageMetricRecord.Exclude_keyofApiUsageMetricRecord.tenantId__'
    PaginatedResult_Omit_ApiUsageMetricRecord.tenantId__:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Omit_ApiUsageMetricRecord.tenantId_'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    PageSort:
      type: string
      enum:
        - asc
        - desc
      default: desc
      example: desc
      description: Sorting order for the paginated results => desc (descending; default) or asc (ascending).
    DeviceCountByType:
      properties:
        generic:
          type: number
          format: double
        gateway:
          type: number
          format: double
        bluetoothLE:
          type: number
          format: double
        total:
          type: number
          format: double
      required:
        - generic
        - gateway
        - bluetoothLE
        - total
      type: object
      additionalProperties: false
    LocationServiceUsage:
      properties:
        requests:
          type: number
          format: double
        devicesUsing:
          type: number
          format: double
      required:
        - requests
        - devicesUsing
      type: object
      additionalProperties: false
    Pick_Record_LocationServices.LocationServiceUsage_.Exclude_keyofRecord_LocationServices.LocationServiceUsage_.GROUND_FIX__:
      properties:
        AGPS:
          $ref: '#/components/schemas/LocationServiceUsage'
        PGPS:
          $ref: '#/components/schemas/LocationServiceUsage'
        SCELL:
          $ref: '#/components/schemas/LocationServiceUsage'
        MCELL:
          $ref: '#/components/schemas/LocationServiceUsage'
        WIFI:
          $ref: '#/components/schemas/LocationServiceUsage'
      type: object
      description: From T, pick a set of properties whose keys are in the union K
    Omit_Record_LocationServices.LocationServiceUsage_.GROUND_FIX_:
      $ref: '#/components/schemas/Pick_Record_LocationServices.LocationServiceUsage_.Exclude_keyofRecord_LocationServices.LocationServiceUsage_.GROUND_FIX__'
    LocationServicesUsageSummary:
      $ref: '#/components/schemas/Omit_Record_LocationServices.LocationServiceUsage_.GROUND_FIX_'
    ServiceUsageSummary:
      properties:
        date:
          $ref: '#/components/schemas/YearMonth'
        fotaJobExecutions:
          type: number
          format: double
        locationServices:
          $ref: '#/components/schemas/LocationServicesUsageSummary'
        storedDeviceMessages:
          type: number
          format: double
      required:
        - date
        - fotaJobExecutions
        - locationServices
        - storedDeviceMessages
      type: object
      additionalProperties: false
    ApiUsageMetricsSummary:
      properties:
        currentDevices:
          $ref: '#/components/schemas/DeviceCountByType'
        services:
          items:
            $ref: '#/components/schemas/ServiceUsageSummary'
          type: array
      required:
        - currentDevices
        - services
      type: object
      additionalProperties: false
      example:
        currentDevices:
          generic: 12
          gateway: 5
          bluetoothLE: 21
          total: 38
        services:
          - date: 2022-05
            fotaJobExecutions: 206
            locationServices:
              AGPS:
                requests: 773
                devicesUsing: 72
              PGPS:
                requests: 492
                devicesUsing: 55
              SCELL:
                requests: 23
                devicesUsing: 3
              MCELL:
                requests: 0
                devicesUsing: 0
              WIFI:
                requests: 8
                devicesUsing: 1
            storedDeviceMessages: 5829
          - date: 2022-04
            fotaJobExecutions: 124
            locationServices:
              AGPS:
                requests: 1322
                devicesUsing: 27
              PGPS:
                requests: 995
                devicesUsing: 31
              SCELL:
                requests: 56
                devicesUsing: 14
              MCELL:
                requests: 105
                devicesUsing: 12
              WIFI:
                requests: 10
                devicesUsing: 1
            storedDeviceMessages: 3221
    DeviceId:
      type: string
      example: nrf-1234567890123456789000
      description: This is the canonical device id used in the device certificate, and as the MQTT client id.
      pattern: /^[a-z0-9:_-]{1,128}$/i
    DeviceCertificate:
      properties:
        clientId:
          $ref: '#/components/schemas/DeviceId'
          description: The ID for the device associated with this certificate. Use this when setting the clientId for your MQTT client.
          example: nrf-123456789123456
        caCert:
          type: string
          description: The AmazonRootCA1.pem used for establishing TLS communications with AWS IoT.
          example: |
            -----BEGIN CERTIFICATE-----
            MIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF
            ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6
            b24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL
            MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv
            b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj
            ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM
            9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw
            IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6
            VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L
            93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm
            jgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC
            AYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA
            A4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI
            U5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs
            N+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv
            o/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU
            5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy
            rqXRfboQnoZsG4q5WTP468SQvvG5
            -----END CERTIFICATE-----
        clientCert:
          type: string
          description: The x.509 certificate. If this is for an "account device" this string contains only one certificate. JITP device certificates, which are generated using an intermediate CA cert, contain a bundled certificate consisting of the device certificate and the intermediate CA pem.
          example: |
            -----BEGIN CERTIFICATE-----
            MIIB7DCCAZMCFFxFKi7+awbjc0j1fN2eh4rsSOZ/MAoGCCqGSM49BAMCMGgxCzAJ
            BgNVBAYTAk5PMQ8wDQYDVQQIDAZOb3J3YXkxEjAQBgNVBAcMCVRyb25kaGVpbTEd
            MBsGA1UECgwUTm9yZGljIFNlbWljb25kdWN0b3IxFTATBgNVBAsMDFRlc3QgRGV2
            aWNlczAgFw0yMTA2MTEyMDU4MzVaGA8yMDUxMDYwNDIwNTgzNVowgYcxCzAJBgNV
            BAYTAk5PMRIwEAYDVQQIDAlUcm9uZGVsYWcxEjAQBgNVBAcMCVRyb25kaGVpbTEh
            MB8GA1UECgwYTm9yZGljIFNlbWljb25kdWN0b3IgQVNBMS0wKwYDVQQDDCRkYjEw
            OWYxMC1iOTZiLTRhNGMtODIxOS0yMTEzOTQyNjE2ZDMwWTATBgcqhkjOPQIBBggq
            hkjOPQMBBwNCAAQS2bfNI8mgS9b7d6zC/qnYo3C4/Xck/4sbGsUBsOWDKcgp303h
            jgWsEWPmq+sZdvUD5NUvwcODxjchEE+1EjXfMAoGCCqGSM49BAMCA0cAMEQCIDWi
            AH0Oml+9+jEPtnqm6pm6vFmHlHlIovAqBZTed2teAiBGg9S21Wd+gFA1Y38OyURw
            GKc8WsgwULn8tOOuGNdl8w==
            -----END CERTIFICATE-----
        privateKey:
          type: string
          description: The private key associated with the device certificate.
          example: |
            -----BEGIN EC PARAMETERS-----
            BggqhkjOPQMBBw==
            -----END EC PARAMETERS-----
            -----BEGIN EC PRIVATE KEY-----
            MHcCAQEEIFcBJEN+pgMAZZqlHySta85JQUR+Q9joiQRkKM+MhidLoAoGCCqGSM49
            AwEHoUQDQgAEEtm3zSPJoEvW+3eswv6p2KNwuP13JP+LGxrFAbDlgynIKd9N4Y4F
            rBFj5qvrGXb1A+TVL8HDg8Y3IRBPtRI13w==
            -----END EC PRIVATE KEY-----
      required:
        - clientId
        - caCert
        - clientCert
      type: object
      additionalProperties: false
    CertificateListItem:
      properties:
        id:
          type: string
          description: The id of the certificate.
          example: a5592ec1-18ae-4d9d-bc44-1d9bd927bbe9
        clientId:
          type: string
          description: The id of the device associated with this certificate. Use this when setting the clientId for your MQTT client.
          example: nrf-123456789123456
      required:
        - id
        - clientId
      type: object
      additionalProperties: false
    PaginatedResult_CertificateListItem_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/CertificateListItem'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    ServiceKeyJwt:
      type: string
      example: eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzU0NDQ2NDAsImlhdCI6MTYzMjg1MjY1NCwic3ViIjoibnJmY2xvdWQtZXZhbHVhdGlvbi1kZXZpY2UtM2JmNTBlY2YtMmY3Zi00NjlmLTg4YTQtMmFhODhiZGMwODNiIn0.ldxPFg7xofD8gxjRkdu8WXl-cD01wVqn-VhvhyeuEXMeAmFpDHbSxEo5rs1DofEougUQnZy31T-e_5EQ8rlNMg
      description: JWT signed by the private key of the service key pair.
    PrivateKey:
      type: string
      example: '-----BEGIN PRIVATE KEY-----MIIEowIBAAKCAQEAqSnu/Mn/G5BWYif0mIaVYJG8...-----END PRIVATE KEY-----'
      description: The private key of the service key pair.
    ServiceKeyCreatedAt:
      type: string
      example: '2022-12-19T19:39:02.655Z'
      description: The date when the service key pair was created in ISO format.
    ExpirationDate:
      type: string
      format: date-time
      description: Expiration date for the provided ServiceEvaluationToken
    ServiceKeyTokenResponse:
      properties:
        expires:
          $ref: '#/components/schemas/ExpirationDate'
        token:
          $ref: '#/components/schemas/ServiceKeyJwt'
      required:
        - expires
        - token
      type: object
      additionalProperties: false
    ULID:
      type: string
      example: 01EZZJVDQJPWT7V4FWNVDHNMM5
      description: Universally Unique Lexicographically Sortable Identifier (using Crockford's alphabet).
      pattern: ^[0-9A-HJKMNP-TV-Z]{26}$
    BulkOpsRequestEndpoint:
      enum:
        - PROVISION_DEVICES
        - REGISTER_PUBLIC_KEYS
        - VERIFY_ATTESTATION_TOKENS
        - VERIFY_JWTS
        - CLAIM_DEVICE_OWNERSHIP
      type: string
    BulkOpsRequestStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - FAILED
        - SUCCEEDED
      type: string
    ISODateTimeString:
      type: string
      example: '2020-06-25T21:05:12.830Z'
      format: date-time
      description: HTML-encoded ISO-8601 date-time string denoting the start or end of a date range. If the string includes only a date, the time is the beginning of the day (00:00:00).
    Pick_BulkOpsRequest.Exclude_keyofBulkOpsRequest.tenantId-or-metadata__:
      properties:
        bulkOpsRequestId:
          $ref: '#/components/schemas/ULID'
        endpoint:
          $ref: '#/components/schemas/BulkOpsRequestEndpoint'
        status:
          $ref: '#/components/schemas/BulkOpsRequestStatus'
        requestedAt:
          $ref: '#/components/schemas/ISODateTimeString'
        completedAt:
          $ref: '#/components/schemas/ISODateTimeString'
      required:
        - bulkOpsRequestId
        - endpoint
        - status
        - requestedAt
      type: object
      description: From T, pick a set of properties whose keys are in the union K
    BulkOpsRequestDetails:
      properties:
        bulkOpsRequestId:
          $ref: '#/components/schemas/ULID'
        endpoint:
          $ref: '#/components/schemas/BulkOpsRequestEndpoint'
        status:
          $ref: '#/components/schemas/BulkOpsRequestStatus'
        requestedAt:
          $ref: '#/components/schemas/ISODateTimeString'
        completedAt:
          $ref: '#/components/schemas/ISODateTimeString'
        uploadedDataUrl:
          type: string
          description: The URL at which you can retrieve the data you originally uploaded to an endpoint that supports bulk operations.
          example: https://bulk-ops-requests.nrfcloud.com/a5592ec1-18ae-4d9d-bc44-1d9bd927bbe9/provision_devices/01EZZJVDQJPWT7V4FWNVDHNMM5.csv
        resultDataUrl:
          type: string
          description: The URL at which you can retrieve the result, if available, for the data you originally uploaded to an endpoint that supports bulk operations.
          example: https://bulk-ops-requests.nrfcloud.com/a5592ec1-18ae-4d9d-bc44-1d9bd927bbe9/provision_devices/01EZZJVDQJPWT7V4FWNVDHNMM5-result.json
        errorSummaryUrl:
          type: string
          description: The URL at which you can retrieve a summary of errors and the row indices they occurred at for a failed bulk ops request job.
          example: https://bulk-ops-requests.nrfcloud.com/a5592ec1-18ae-4d9d-bc44-1d9bd927bbe9/provision_devices/01EZZJVDQJPWT7V4FWNVDHNMM5.json
      required:
        - bulkOpsRequestId
        - endpoint
        - status
        - requestedAt
        - uploadedDataUrl
      type: object
      additionalProperties: false
    PaginatedResult_BulkOpsRequestDetails_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/BulkOpsRequestDetails'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    Nominal_string.OwnershipCode_:
      type: string
    OwnershipCode:
      $ref: '#/components/schemas/Nominal_string.OwnershipCode_'
      description: |-
        For Nordic products this is the PIN or HWID printed on the label. Otherwise, this is the ownership code you set when creating a device certificate.
        All ownership codes are sanitized. Requires a min of 4 characters consisting only of numbers, letters, - or :.
      pattern: ^[a-zA-Z0-9-:]{4,}$
    ThingType:
      type: string
      description: A custom string value to specify the type of thing (device) being provisioned on nRF Cloud.
      pattern: /[a-zA-Z0-9_.,@\/:#-]{0,799}/
    Nominal_string.BLEUUID_:
      type: string
    BLEUUID:
      $ref: '#/components/schemas/Nominal_string.BLEUUID_'
    CharacteristicId:
      $ref: '#/components/schemas/BLEUUID'
      pattern: ^[a-fA-F0-9]{4}$|^[a-fA-F0-9]{8}$|^[a-fA-F0-9]{8}-?[a-fA-F0-9]{4}-?[a-fA-F0-9]{4}-?[a-fA-F0-9]{4}-?[a-fA-F0-9]{12}$
    DescriptorId:
      $ref: '#/components/schemas/BLEUUID'
      pattern: ^[a-fA-F0-9]{4}$|^[a-fA-F0-9]{8}$|^[a-fA-F0-9]{8}-?[a-fA-F0-9]{4}-?[a-fA-F0-9]{4}-?[a-fA-F0-9]{4}-?[a-fA-F0-9]{12}$
    RestApiPayloadContentTypeWithCsv:
      enum:
        - text/plain;charset=UTF8
        - text/plain;charset=ASCII
        - text/plain
        - application/octet-stream
        - text/csv
      type: string
    ProvisionDevicesPayload:
      type: string
    RegisterPublicKeysPayload:
      type: string
    deviceTypes.Generic:
      enum:
        - Generic
      type: string
    NonGatewayIPDeviceSubType:
      enum:
        - jitp-generic
        - jitp-nordic-hardware
        - unknown
      type: string
    GenericDeviceState:
      properties:
        reported:
          properties: {}
          additionalProperties: {}
          type: object
          example:
            connected: false
            sessionIdentifier: ab6af4e7-32e8-4107-94d8-f096e776c077
            pairing:
              state: paired
              topics:
                d2c: prod/7c219c23-644e-4565-9fe7-6c56ab8bf949/m/d/nrf-123456789012345
                c2d: prod/7c219c23-644e-4565-9fe7-6c56ab8bf949/m/d/nrf-123456789012345/c2d
            nrfcloud_mqtt_topic_prefix: prod/7c219c23-644e-4565-9fe7-6c56ab8bf949/
            device:
              networkInfo:
                currentBand: 20
                supportedBands: "(1,2,3,4,5,8,12,13,17,18,19,20,25,26,28,66)\r\n"
                areaCode: 3030
                mccmnc: '22801'
                ipAddress: 10.1.10.106
                ueMode: 2
                cellID: 17513992
                networkMode: LTE-M GPS
              simInfo:
                uiccMode: 1
                iccid: '89410119346707573424'
                imsi: '228017001757342'
              deviceInfo:
                modemFirmware: mfw_nrf9160_1.2.0
                batteryVoltage: 5203
                imei: '123456789012345'
                board: nrf9160_pca10090
                appVersion: v1.2.0-406-gbc7ade8b14a1
                appName: asset_tracker
              serviceInfo:
                ui:
                  - GPS
                  - FLIP
                  - TEMP
                  - HUMID
                  - AIR_PRESS
                  - RSRP
                fota_v1:
                  - APP
                  - MODEM
            config:
              GPS:
                enable: false
        desired:
          properties: {}
          additionalProperties: {}
          type: object
          example:
            pairing:
              state: paired
              topics:
                d2c: prod/7c219c23-644e-4565-9fe7-6c56ab8bf949/m/d/nrf-123456789012345
                c2d: prod/7c219c23-644e-4565-9fe7-6c56ab8bf949/m/d/nrf-123456789012345/c2d
            nrfcloud_mqtt_topic_prefix: prod/7c219c23-644e-4565-9fe7-6c56ab8bf949/
        delta:
          properties: {}
          additionalProperties: {}
          type: object
          example:
            config:
              GPS:
                enable: true
        metadata:
          properties: {}
          additionalProperties: {}
          type: object
          example:
            desired:
              pairing:
                state:
                  timestamp: 1594295242
                topics:
                  d2c:
                    timestamp: 1594295242
                  c2d:
                    timestamp: 1594295242
              nrfcloud_mqtt_topic_prefix:
                timestamp: 1594295242
            reported:
              connected:
                timestamp: 1594395957
              sessionIdentifier:
                timestamp: 1594395957
              pairing:
                state:
                  timestamp: 1594395561
                topics:
                  d2c:
                    timestamp: 1594395561
                  c2d:
                    timestamp: 1594395561
              nrfcloud_mqtt_topic_prefix:
                timestamp: 1594395561
              device:
                networkInfo:
                  currentBand:
                    timestamp: 1594395562
                  supportedBands:
                    timestamp: 1594395562
                  areaCode:
                    timestamp: 1594395562
                  mccmnc:
                    timestamp: 1594395562
                  ipAddress:
                    timestamp: 1594395562
                  ueMode:
                    timestamp: 1594395562
                  cellID:
                    timestamp: 1594395562
                  networkMode:
                    timestamp: 1594395562
                simInfo:
                  uiccMode:
                    timestamp: 1594395562
                  iccid:
                    timestamp: 1594395562
                  imsi:
                    timestamp: 1594395562
                deviceInfo:
                  modemFirmware:
                    timestamp: 1594395562
                  batteryVoltage:
                    timestamp: 1594395562
                  imei:
                    timestamp: 1594395562
                  board:
                    timestamp: 1594395562
                  appVersion:
                    timestamp: 1594395562
                  appName:
                    timestamp: 1594395562
                serviceInfo:
                  ui:
                    - timestamp: 1594395562
                    - timestamp: 1594395562
                    - timestamp: 1594395562
                    - timestamp: 1594395562
                    - timestamp: 1594395562
                    - timestamp: 1594395562
                  fota_v1:
                    - timestamp: 1594395562
                    - timestamp: 1594395562
              config:
                GPS:
                  enable:
                    timestamp: 1594295362
        version:
          type: number
          format: double
          example: 8115
      type: object
      additionalProperties: false
    DeviceName:
      type: string
      description: Friendly device name. Can be used for searching and filtering devices.
      pattern: ^(.){1,128}$
    deviceTypes:
      enum:
        - Gateway
        - BLE
        - Generic
      type: string
    Nominal_string.Url_:
      type: string
    Url:
      $ref: '#/components/schemas/Nominal_string.Url_'
      format: url
    DeviceDocMeta:
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          example: 4.421
      type: object
      additionalProperties: false
    DeviceFirmwareArgs:
      properties:
        supports:
          items:
            type: string
            enum:
              - APP
              - MODEM
              - BOOT
              - SOFTDEVICE
              - BOOTLOADER
              - MDM_FULL
          type: array
          example:
            - BOOT
            - APP
            - MODEM
            - SOFTDEVICE
        app:
          properties:
            version:
              type: string
            name:
              type: string
          type: object
        bleSupport:
          type: boolean
        boot:
          type: string
        modem:
          type: string
      type: object
      additionalProperties: false
    DeviceDocMetaArgs:
      properties:
        createdAt:
          anyOf:
            - type: string
              format: date-time
            - type: string
        updatedAt:
          anyOf:
            - type: string
              format: date-time
            - type: string
      type: object
      additionalProperties: false
    GenericDevice:
      properties:
        id:
          $ref: '#/components/schemas/DeviceId'
          example: nrf-123456789012345
        name:
          $ref: '#/components/schemas/DeviceName'
          example: WarehouseEastTemp1
        image:
          $ref: '#/components/schemas/Url'
          example: https://device-images.nrfcloud.com/7c219c23-644e-4565-9fe7-6c56ab8bf949_nrf-123456789012345_a2ca62a47d.png
        tags:
          items:
            $ref: '#/components/schemas/DeviceTag'
          type: array
          example:
            - warehouse-east
            - temperature
        tenantId:
          $ref: '#/components/schemas/TenantId'
          example: 7c219c23-644e-4565-9fe7-6c56ab8bf949
        subType:
          anyOf:
            - $ref: '#/components/schemas/NonGatewayIPDeviceSubType'
            - type: string
        firmware:
          $ref: '#/components/schemas/DeviceFirmwareArgs'
        $meta:
          $ref: '#/components/schemas/DeviceDocMeta'
        type:
          $ref: '#/components/schemas/deviceTypes.Generic'
        state:
          $ref: '#/components/schemas/GenericDeviceState'
      required:
        - id
        - tenantId
        - name
        - type
        - subType
        - tags
        - $meta
      type: object
      additionalProperties: false
    deviceTypes.BLE:
      enum:
        - BLE
      type: string
    BLEDeviceSubType:
      enum:
        - generic-ble-device
        - nordic-ble-device
        - beacon
        - unknown
      type: string
    Descriptors:
      properties: {}
      type: object
      additionalProperties:
        properties:
          value:
            items:
              type: number
              format: double
            type: array
          path:
            type: string
          uuid:
            type: string
        required:
          - value
          - path
          - uuid
        type: object
    Characteristics:
      properties: {}
      type: object
      additionalProperties:
        properties:
          descriptors:
            $ref: '#/components/schemas/Descriptors'
          properties:
            properties:
              broadcast:
                type: boolean
              authorizedSignedWrite:
                type: boolean
              indicate:
                type: boolean
              notify:
                type: boolean
              write:
                type: boolean
              writeWithoutResponse:
                type: boolean
              read:
                type: boolean
            type: object
          value:
            items:
              type: number
              format: double
            type: array
          handle:
            type: number
            format: double
          path:
            type: string
          uuid:
            type: string
        required:
          - descriptors
          - properties
          - value
          - path
          - uuid
        type: object
    BLEDeviceState:
      properties: {}
      type: object
      additionalProperties:
        properties:
          characteristics:
            $ref: '#/components/schemas/Characteristics'
          uuid:
            type: string
        required:
          - characteristics
          - uuid
        type: object
      example:
        FE59:
          characteristics:
            8EC90003F3154F609FB8838830DAEA50:
              path: FE59/8EC90003F3154F609FB8838830DAEA50
              descriptors:
                '2902':
                  path: FE59/8EC90003F3154F609FB8838830DAEA50/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: 8EC90003F3154F609FB8838830DAEA50
              value: []
              properties:
                indicate: true
                write: true
          uuid: FE59
        EF6804009B3549339B1052FFA9740042:
          characteristics:
            EF6804099B3549339B1052FFA9740042:
              path: EF6804009B3549339B1052FFA9740042/EF6804099B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6804009B3549339B1052FFA9740042/EF6804099B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6804099B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6804019B3549339B1052FFA9740042:
              path: EF6804009B3549339B1052FFA9740042/EF6804019B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6804019B3549339B1052FFA9740042
              value:
                - 232
                - 3
                - 244
                - 1
                - 244
                - 1
                - 10
                - 0
                - 1
              properties:
                read: true
                write: true
            EF6804029B3549339B1052FFA9740042:
              path: EF6804009B3549339B1052FFA9740042/EF6804029B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6804009B3549339B1052FFA9740042/EF6804029B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6804029B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6804049B3549339B1052FFA9740042:
              path: EF6804009B3549339B1052FFA9740042/EF6804049B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6804009B3549339B1052FFA9740042/EF6804049B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6804049B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6804039B3549339B1052FFA9740042:
              path: EF6804009B3549339B1052FFA9740042/EF6804039B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6804009B3549339B1052FFA9740042/EF6804039B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6804039B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6804079B3549339B1052FFA9740042:
              path: EF6804009B3549339B1052FFA9740042/EF6804079B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6804009B3549339B1052FFA9740042/EF6804079B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6804079B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6804059B3549339B1052FFA9740042:
              path: EF6804009B3549339B1052FFA9740042/EF6804059B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6804009B3549339B1052FFA9740042/EF6804059B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6804059B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6804089B3549339B1052FFA9740042:
              path: EF6804009B3549339B1052FFA9740042/EF6804089B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6804009B3549339B1052FFA9740042/EF6804089B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6804089B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF68040A9B3549339B1052FFA9740042:
              path: EF6804009B3549339B1052FFA9740042/EF68040A9B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6804009B3549339B1052FFA9740042/EF68040A9B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF68040A9B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6804069B3549339B1052FFA9740042:
              path: EF6804009B3549339B1052FFA9740042/EF6804069B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6804009B3549339B1052FFA9740042/EF6804069B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6804069B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
          uuid: EF6804009B3549339B1052FFA9740042
        EF6801009B3549339B1052FFA9740042:
          characteristics:
            EF6801089B3549339B1052FFA9740042:
              path: EF6801009B3549339B1052FFA9740042/EF6801089B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6801089B3549339B1052FFA9740042
              value:
                - 0
                - 15
                - 2
              properties:
                read: true
                write: true
            EF6801069B3549339B1052FFA9740042:
              path: EF6801009B3549339B1052FFA9740042/EF6801069B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6801069B3549339B1052FFA9740042
              value: []
              properties:
                read: true
                write: true
            EF6801079B3549339B1052FFA9740042:
              path: EF6801009B3549339B1052FFA9740042/EF6801079B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6801079B3549339B1052FFA9740042
              value:
                - 2
                - 1
                - 0
              properties:
                read: true
            EF6801049B3549339B1052FFA9740042:
              path: EF6801009B3549339B1052FFA9740042/EF6801049B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6801049B3549339B1052FFA9740042
              value:
                - 6
                - 0
                - 24
                - 0
                - 0
                - 0
                - 64
                - 1
              properties:
                read: true
                write: true
            EF6801059B3549339B1052FFA9740042:
              path: EF6801009B3549339B1052FFA9740042/EF6801059B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6801059B3549339B1052FFA9740042
              value:
                - 3
                - 103
                - 111
                - 111
                - 46
                - 103
                - 108
                - 47
                - 112
                - 73
                - 87
                - 100
                - 105
                - 114
              properties:
                read: true
                write: true
            EF6801019B3549339B1052FFA9740042:
              path: EF6801009B3549339B1052FFA9740042/EF6801019B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6801019B3549339B1052FFA9740042
              value:
                - 70
                - 53
                - 58
                - 57
                - 67
              properties:
                read: true
                write: true
            EF6801029B3549339B1052FFA9740042:
              path: EF6801009B3549339B1052FFA9740042/EF6801029B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6801029B3549339B1052FFA9740042
              value:
                - 96
                - 2
                - 180
              properties:
                read: true
                write: true
          uuid: EF6801009B3549339B1052FFA9740042
        EF6803009B3549339B1052FFA9740042:
          characteristics:
            EF6803029B3549339B1052FFA9740042:
              path: EF6803009B3549339B1052FFA9740042/EF6803029B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6803009B3549339B1052FFA9740042/EF6803029B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6803029B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6803019B3549339B1052FFA9740042:
              path: EF6803009B3549339B1052FFA9740042/EF6803019B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6803019B3549339B1052FFA9740042
              value:
                - 2
                - 5
                - 100
                - 50
                - 0
              properties:
                read: true
                write: true
            EF6803039B3549339B1052FFA9740042:
              path: EF6803009B3549339B1052FFA9740042/EF6803039B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6803039B3549339B1052FFA9740042
              value:
                - 0
                - 0
                - 0
                - 0
              properties:
                read: true
                write: true
          uuid: EF6803009B3549339B1052FFA9740042
        EF6805009B3549339B1052FFA9740042:
          characteristics:
            EF6805019B3549339B1052FFA9740042:
              path: EF6805009B3549339B1052FFA9740042/EF6805019B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6805019B3549339B1052FFA9740042
              value:
                - 1
                - 1
              properties:
                read: true
                write: true
            EF6805029B3549339B1052FFA9740042:
              path: EF6805009B3549339B1052FFA9740042/EF6805029B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6805029B3549339B1052FFA9740042
              value: []
              properties:
                writeWithoutResponse: true
            EF6805039B3549339B1052FFA9740042:
              path: EF6805009B3549339B1052FFA9740042/EF6805039B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6805009B3549339B1052FFA9740042/EF6805039B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6805039B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6805049B3549339B1052FFA9740042:
              path: EF6805009B3549339B1052FFA9740042/EF6805049B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6805009B3549339B1052FFA9740042/EF6805049B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6805049B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
          uuid: EF6805009B3549339B1052FFA9740042
        180F:
          characteristics:
            2A19:
              path: 180F/2A19
              descriptors:
                '2902':
                  path: 180F/2A19/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: 2A19
              value:
                - 36
              properties:
                read: true
                notify: true
          uuid: 180F
        EF6802009B3549339B1052FFA9740042:
          characteristics:
            EF6802059B3549339B1052FFA9740042:
              path: EF6802009B3549339B1052FFA9740042/EF6802059B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6802009B3549339B1052FFA9740042/EF6802059B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6802059B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6802049B3549339B1052FFA9740042:
              path: EF6802009B3549339B1052FFA9740042/EF6802049B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6802009B3549339B1052FFA9740042/EF6802049B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6802049B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6802039B3549339B1052FFA9740042:
              path: EF6802009B3549339B1052FFA9740042/EF6802039B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6802009B3549339B1052FFA9740042/EF6802039B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6802039B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6802019B3549339B1052FFA9740042:
              path: EF6802009B3549339B1052FFA9740042/EF6802019B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6802009B3549339B1052FFA9740042/EF6802019B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6802019B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6802029B3549339B1052FFA9740042:
              path: EF6802009B3549339B1052FFA9740042/EF6802029B3549339B1052FFA9740042
              descriptors:
                '2902':
                  path: EF6802009B3549339B1052FFA9740042/EF6802029B3549339B1052FFA9740042/2902
                  uuid: '2902'
                  value:
                    - 0
              uuid: EF6802029B3549339B1052FFA9740042
              value: []
              properties:
                notify: true
            EF6802069B3549339B1052FFA9740042:
              path: EF6802009B3549339B1052FFA9740042/EF6802069B3549339B1052FFA9740042
              descriptors: {}
              uuid: EF6802069B3549339B1052FFA9740042
              value:
                - 208
                - 7
                - 208
                - 7
                - 208
                - 7
                - 220
                - 5
                - 2
                - 103
                - 78
                - 29
              properties:
                read: true
                write: true
          uuid: EF6802009B3549339B1052FFA9740042
    BLEDevice:
      properties:
        id:
          $ref: '#/components/schemas/DeviceId'
          example: CA:B2:31:EE:E0:9E
        name:
          $ref: '#/components/schemas/DeviceName'
          example: WarehouseEastTemp1
        image:
          $ref: '#/components/schemas/Url'
          example: https://device-images.nrfcloud.com/7c219c23-644e-4565-9fe7-6c56ab8bf949_nrf-123456789012345_a2ca62a47d.png
        tags:
          items:
            $ref: '#/components/schemas/DeviceTag'
          type: array
          example:
            - warehouse-east
            - temperature
        tenantId:
          $ref: '#/components/schemas/TenantId'
          example: 7c219c23-644e-4565-9fe7-6c56ab8bf949
        subType:
          $ref: '#/components/schemas/BLEDeviceSubType'
        firmware:
          $ref: '#/components/schemas/DeviceFirmwareArgs'
        $meta:
          $ref: '#/components/schemas/DeviceDocMeta'
        type:
          $ref: '#/components/schemas/deviceTypes.BLE'
        gatewayId:
          $ref: '#/components/schemas/DeviceId'
          example: 7c219c23-925a-4565-9fe7-5b48ab8bf949
        state:
          $ref: '#/components/schemas/BLEDeviceState'
      required:
        - id
        - tenantId
        - name
        - type
        - subType
        - tags
        - $meta
        - gatewayId
      type: object
      additionalProperties: false
    deviceTypes.Gateway:
      enum:
        - Gateway
      type: string
    SoftGatewayType:
      enum:
        - soft
        - android
        - iphone
        - rasppi
        - windows
      type: string
    HardGatewaySubType:
      enum:
        - jitp-apricity-gateway
        - unknown
      type: string
    GatewayDeviceSubType:
      anyOf:
        - $ref: '#/components/schemas/SoftGatewayType'
        - $ref: '#/components/schemas/HardGatewaySubType'
    Record_string.any-or-undefined_:
      properties: {}
      type: object
      description: Construct a type with a set of properties K of type T
    AnyKeyedObject:
      $ref: '#/components/schemas/Record_string.any-or-undefined_'
      description: Keyed object with any value. Encapsulates any usage.
    DeviceShadow:
      properties:
        reported:
          $ref: '#/components/schemas/AnyKeyedObject'
          example:
            connected: false
            sessionIdentifier: 8a00a643-4991-4174-a1c6-9511e18ba7cb
            genericInfo:
              versions:
                library: unknown
                gateway: 2.1.0
              platform:
                name: cordova
                version: ''
            stage: prod
            desiredConnections:
              - address:
                  address: C22973F0-C1CA-496E-559C-7EE4EEF296E5
                  type: randomStatic
                id: C22973F0-C1CA-496E-559C-7EE4EEF296E5
                connectOptions:
                  security:
                    initiate: true
            name: ''
            statusConnections:
              C22973F0-C1CA-496E-559C-7EE4EEF296E5:
                id: C22973F0-C1CA-496E-559C-7EE4EEF296E5
                status:
                  connected: false
                  connecting: false
        desired:
          $ref: '#/components/schemas/AnyKeyedObject'
          example:
            stage: prod
            desiredConnections:
              - address:
                  address: C22973F0-C1CA-496E-559C-7EE4EEF296E5
                  type: randomStatic
                id: C22973F0-C1CA-496E-559C-7EE4EEF296E5
                connectOptions:
                  security:
                    initiate: true
        delta:
          $ref: '#/components/schemas/AnyKeyedObject'
        metadata:
          $ref: '#/components/schemas/AnyKeyedObject'
          example:
            desired:
              stage:
                timestamp: 1594146861
              desiredConnections:
                - address:
                    address:
                      timestamp: 1594146996
                    type:
                      timestamp: 1594146996
                  id:
                    timestamp: 1594146996
                  connectOptions:
                    security:
                      initiate:
                        timestamp: 1594146996
            reported:
              connected:
                timestamp: 1594227217
              sessionIdentifier:
                timestamp: 1594227217
              genericInfo:
                versions:
                  library:
                    timestamp: 1594226746
                  gateway:
                    timestamp: 1594226746
                platform:
                  name:
                    timestamp: 1594226746
                  version:
                    timestamp: 1594226746
              stage:
                timestamp: 1594226746
              desiredConnections:
                - address:
                    address:
                      timestamp: 1594146997
                    type:
                      timestamp: 1594146997
                  id:
                    timestamp: 1594146997
                  connectOptions:
                    security:
                      initiate:
                        timestamp: 1594146997
              name:
                timestamp: 1594146997
              statusConnections:
                C22973F0-C1CA-496E-559C-7EE4EEF296E5:
                  id:
                    timestamp: 1594226766
                  status:
                    connected:
                      timestamp: 1594226766
                    connecting:
                      timestamp: 1594226766
        version:
          type: number
          format: double
      type: object
      additionalProperties: false
    GatewayDevice:
      properties:
        id:
          $ref: '#/components/schemas/DeviceId'
          example: 7c219c23-925a-4565-9fe7-5b48ab8bf949
        name:
          $ref: '#/components/schemas/DeviceName'
          example: WarehouseEastTemp1
        image:
          $ref: '#/components/schemas/Url'
          example: https://device-images.nrfcloud.com/7c219c23-644e-4565-9fe7-6c56ab8bf949_nrf-123456789012345_a2ca62a47d.png
        tags:
          items:
            $ref: '#/components/schemas/DeviceTag'
          type: array
          example:
            - warehouse-east
            - temperature
        tenantId:
          $ref: '#/components/schemas/TenantId'
          example: 7c219c23-644e-4565-9fe7-6c56ab8bf949
        subType:
          $ref: '#/components/schemas/GatewayDeviceSubType'
        firmware:
          $ref: '#/components/schemas/DeviceFirmwareArgs'
        $meta:
          $ref: '#/components/schemas/DeviceDocMeta'
        type:
          $ref: '#/components/schemas/deviceTypes.Gateway'
        state:
          $ref: '#/components/schemas/DeviceShadow'
      required:
        - id
        - tenantId
        - name
        - type
        - subType
        - tags
        - $meta
      type: object
      additionalProperties: false
    Device:
      anyOf:
        - $ref: '#/components/schemas/GenericDevice'
        - $ref: '#/components/schemas/BLEDevice'
        - $ref: '#/components/schemas/GatewayDevice'
    JSONataTransformedResponse:
      description: Response body transformed by JSONata expression. For more info see `Transforms` in the official [Guides](https://docs.nrfcloud.com/).
    PaginatedResult_Device-or-JSONataTransformedResponse_:
      properties:
        items:
          items:
            anyOf:
              - $ref: '#/components/schemas/Device'
              - $ref: '#/components/schemas/JSONataTransformedResponse'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    PaginatedResult_DeviceTag-or-JSONataTransformedResponse_:
      properties:
        items:
          items:
            anyOf:
              - $ref: '#/components/schemas/DeviceTag'
              - $ref: '#/components/schemas/JSONataTransformedResponse'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    MqttTopic:
      type: string
      example: d/7e8f29fa-cb04-4351-a7c4-3917649d2d36/d2c/bulk
      description: A string specifying an MQTT topic.
    Message:
      allOf:
        - $ref: '#/components/schemas/AnyKeyedObject'
        - {}
      example:
        messageType: DATA
        data: '2.8'
        appId: TEMP
      description: A JSON object containing a device message that conforms to the device-to-cloud application protocol defined [here](https://github.com/nRFCloud/application-protocols/tree/v1/schemas/deviceToCloud).
    DeviceMessageInput:
      description: Device message input
      properties:
        topic:
          $ref: '#/components/schemas/MqttTopic'
        message:
          anyOf:
            - $ref: '#/components/schemas/Message'
            - items:
                $ref: '#/components/schemas/Message'
              type: array
      required:
        - message
      type: object
      additionalProperties: false
      example:
        topic: d/7e8f29fa-cb04-4351-a7c4-3917649d2d36/d2c/bulk
        message:
          - temp: 59
            units: F
            ts: 1631470795000
          - temp: 54
            units: F
            ts: 1631557195000
    BLEScanType:
      enum:
        - 0
        - 1
      type: number
    BLEScanConfig:
      description: Parameters for configuring a BLE scan operation.
      properties:
        scanType:
          $ref: '#/components/schemas/BLEScanType'
          description: Use `0` for Regular and `1` for Beacon. Default = `0`.
        scanTimeout:
          type: integer
          format: int32
          description: Scan timeout between `1` and `65535` seconds, `0` disables timeout. Default = `3`.
          default: '3'
          minimum: 1
          maximum: 65535
        scanReporting:
          type: string
          enum:
            - instant
            - batch
          description: Use `batch` to send one message for all advertisements received on scan timeout. Use `instant` if every advertisement received shall be sent instantly. Default = `instant`.
          default: instant
        filter:
          properties:
            rssi:
              type: number
              format: double
              description: Lowest accepted RSSI value for scan report. `0` disables filter.
            name:
              type: string
              description: Match start of advertisement name. Case sensitive.
          type: object
      required:
        - scanTimeout
      type: object
      additionalProperties: false
    DeviceStateInput:
      properties:
        reported:
          properties: {}
          additionalProperties: {}
          type: object
          example:
            device:
              serviceInfo:
                fota_v1:
                  - APP
                  - MODEM
        desired:
          properties: {}
          additionalProperties: {}
          type: object
          example:
            someField1:
              someField2: someValue2
      type: object
      additionalProperties: false
    RestApiPayload:
      type: string
      maxLength: 1333333
    CreateSoftGatewayPayload:
      properties:
        cognitoIdentityId:
          type: string
        softGatewayType:
          $ref: '#/components/schemas/SoftGatewayType'
      required:
        - cognitoIdentityId
      type: object
      additionalProperties: false
    RestApiPayloadContentTypeWithZip:
      enum:
        - text/plain;charset=UTF8
        - text/plain;charset=ASCII
        - text/plain
        - application/octet-stream
        - application/zip
      type: string
    Nominal_string.FirmwareVersion_:
      type: string
    FirmwareVersion:
      $ref: '#/components/schemas/Nominal_string.FirmwareVersion_'
    BundleId:
      type: string
      description: Unique bundle identifier
      pattern: ^(APP|MODEM|BOOT|SOFTDEVICE|BOOTLOADER|MDM_FULL)\*[0-9a-zA-Z]{8}\*.*$
    Firmware:
      properties:
        name:
          type: string
        description:
          type: string
        version:
          $ref: '#/components/schemas/FirmwareVersion'
        type:
          $ref: '#/components/schemas/FirmwareTypes'
        bundleId:
          $ref: '#/components/schemas/BundleId'
        filenames:
          items:
            type: string
          type: array
        size:
          type: number
          format: double
        lastModified:
          type: string
          format: date-time
      required:
        - version
        - type
        - bundleId
        - filenames
        - size
      type: object
      additionalProperties: false
    PaginatedResult_Firmware_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Firmware'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    FOTAJobExecutionState:
      properties:
        deviceId:
          $ref: '#/components/schemas/DeviceId'
        status:
          type: string
        statusDetail:
          type: string
        lastUpdatedAt:
          type: string
          format: date-time
      required:
        - deviceId
        - status
      type: object
      additionalProperties: false
    PaginatedResult_FOTAJobExecutionState_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/FOTAJobExecutionState'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    UUID:
      type: string
      description: Universally unique identifier
      pattern: ^[a-f0-9]{8}-?[a-f0-9]{4}-?[a-f0-9]{4}-?[a-f0-9]{4}-?[a-f0-9]{12}$
    JobId:
      $ref: '#/components/schemas/UUID'
    FotaV2JobExecutionEvents:
      type: string
      enum:
        - QUEUED
        - IN_PROGRESS
        - FAILED
        - SUCCEEDED
        - TIMED_OUT
        - CANCELLED
        - REJECTED
        - DOWNLOADING
    FotaV2JobDocumentModel:
      properties:
        firmwareType:
          $ref: '#/components/schemas/FirmwareTypes'
        fileSize:
          type: number
          format: double
          example: 512
        host:
          type: string
          example: firmware.nrfcloud.com
        path:
          type: string
          example: b67217f3-c246-4c7c-91b0-214579ce10d0/APP*c52c99d3*v1.3.0-280-g485445b6a869/AT_fast_blink.bin
        version:
          $ref: '#/components/schemas/FirmwareVersion'
          example: v1.3.0-280-g485445b6a869
        bundleId:
          $ref: '#/components/schemas/BundleId'
      required:
        - firmwareType
        - fileSize
        - host
        - path
        - version
        - bundleId
      type: object
      additionalProperties: false
    Pick_FotaV2JobExecutionModel.Exclude_keyofFotaV2JobExecutionModel.createdAt-or-lastUpdatedAt-or-deviceId__:
      properties:
        tenantId:
          $ref: '#/components/schemas/TenantId'
        status:
          $ref: '#/components/schemas/FotaV2JobExecutionEvents'
        executionId:
          $ref: '#/components/schemas/UUID'
        jobId:
          $ref: '#/components/schemas/JobId'
        statusDetail:
          type: string
        jobDocument:
          $ref: '#/components/schemas/FotaV2JobDocumentModel'
      required:
        - tenantId
        - status
        - executionId
        - jobId
        - jobDocument
      type: object
      description: From T, pick a set of properties whose keys are in the union K
    FOTAJobExecution:
      properties:
        tenantId:
          $ref: '#/components/schemas/TenantId'
        status:
          $ref: '#/components/schemas/FotaV2JobExecutionEvents'
        executionId:
          $ref: '#/components/schemas/UUID'
        jobId:
          $ref: '#/components/schemas/JobId'
        statusDetail:
          type: string
        jobDocument:
          $ref: '#/components/schemas/FotaV2JobDocumentModel'
        createdAt:
          type: string
          format: date-time
        deviceId:
          $ref: '#/components/schemas/DeviceId'
        lastUpdatedAt:
          type: string
          format: date-time
      required:
        - tenantId
        - status
        - executionId
        - jobId
        - jobDocument
        - createdAt
        - deviceId
        - lastUpdatedAt
      type: object
      additionalProperties: false
      example:
        status: SUCCEEDED
        deviceId: nrfsim-453330795897806100000
        createdAt: '2020-12-09T18:34:13.472Z'
        executionId: 4d50a3ba-9573-4ec9-b362-02e2bde5aaee
        jobDocument:
          path: 3701edba-5bd5-4fcf-a0d1-769457a8f409/APP*c52c99d3*v1.3.0-280-g485445b6a869/AT_fast_blink.bin
          host: firmware.nrfcloud.com
          firmwareType: APP
          fileSize: 253640
          version: v1.3.0-280-g485445b6a869
        jobId: f539350f-7784-470c-b0cf-c669147b0c54
        lastUpdatedAt: '2020-12-09T18:34:18.731Z'
        tenantId: 3701edba-5bd5-4fcf-a0d1-769457a8f409
        statusDetail: Job Completed
    PaginatedResult_FOTAJobExecution_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/FOTAJobExecution'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    CreateJobInputTags:
      properties:
        bundleId:
          $ref: '#/components/schemas/BundleId'
          description: A unique id created by the server when the firmware was uploaded (concatenation of firmware type, random string, and firmware version).
        autoApply:
          type: boolean
          description: |-
            If set to false the job will not be applied immediately, but instead will be left in the "CREATED" status.
            The job can later be applied using POST /fota-jobs/{jobId}/apply
          default: 'true'
        name:
          type: string
          description: Friendly name for this job
          maxLength: 64
        description:
          type: string
          description: Short description for this job
          maxLength: 1024
        tags:
          items:
            $ref: '#/components/schemas/DeviceTag'
          type: array
          description: A list of tags to apply the device to
          minItems: 1
      required:
        - bundleId
        - tags
      type: object
      additionalProperties: false
    CreateJobInputBase:
      properties:
        bundleId:
          $ref: '#/components/schemas/BundleId'
          description: A unique id created by the server when the firmware was uploaded (concatenation of firmware type, random string, and firmware version).
        autoApply:
          type: boolean
          description: |-
            If set to false the job will not be applied immediately, but instead will be left in the "CREATED" status.
            The job can later be applied using POST /fota-jobs/{jobId}/apply
          default: 'true'
        name:
          type: string
          description: Friendly name for this job
          maxLength: 64
        description:
          type: string
          description: Short description for this job
          maxLength: 1024
      required:
        - bundleId
      type: object
      additionalProperties: false
    CreateJobInputDeviceIds:
      properties:
        bundleId:
          $ref: '#/components/schemas/BundleId'
          description: A unique id created by the server when the firmware was uploaded (concatenation of firmware type, random string, and firmware version).
        autoApply:
          type: boolean
          description: |-
            If set to false the job will not be applied immediately, but instead will be left in the "CREATED" status.
            The job can later be applied using POST /fota-jobs/{jobId}/apply
          default: 'true'
        name:
          type: string
          description: Friendly name for this job
          maxLength: 64
        description:
          type: string
          description: Short description for this job
          maxLength: 1024
        deviceIds:
          items:
            $ref: '#/components/schemas/DeviceId'
          type: array
          description: A list of device identifiers assigned to this job.
          minItems: 1
      required:
        - bundleId
        - deviceIds
      type: object
      additionalProperties: false
    CreateJobInputDeviceIdentifiers:
      properties:
        bundleId:
          $ref: '#/components/schemas/BundleId'
          description: A unique id created by the server when the firmware was uploaded (concatenation of firmware type, random string, and firmware version).
        autoApply:
          type: boolean
          description: |-
            If set to false the job will not be applied immediately, but instead will be left in the "CREATED" status.
            The job can later be applied using POST /fota-jobs/{jobId}/apply
          default: 'true'
        name:
          type: string
          description: Friendly name for this job
          maxLength: 64
        description:
          type: string
          description: Short description for this job
          maxLength: 1024
        deviceIdentifiers:
          items:
            $ref: '#/components/schemas/DeviceId'
          type: array
          description: A list of device identifiers assigned to this job.
          minItems: 1
          deprecated: true
      required:
        - bundleId
        - deviceIdentifiers
      type: object
      additionalProperties: false
      deprecated: true
    CreateJobInputIdOrIdentifier:
      anyOf:
        - $ref: '#/components/schemas/CreateJobInputDeviceIds'
        - $ref: '#/components/schemas/CreateJobInputDeviceIdentifiers'
    CreateJobInputTagsAndDeviceIds:
      allOf:
        - $ref: '#/components/schemas/CreateJobInputBase'
        - $ref: '#/components/schemas/CreateJobInputTags'
        - $ref: '#/components/schemas/CreateJobInputIdOrIdentifier'
    CreateJobInput:
      anyOf:
        - $ref: '#/components/schemas/CreateJobInputTags'
        - $ref: '#/components/schemas/CreateJobInputTagsAndDeviceIds'
        - $ref: '#/components/schemas/CreateJobInputIdOrIdentifier'
    FotaV2JobTargetModel:
      properties:
        deviceIds:
          items:
            $ref: '#/components/schemas/DeviceId'
          type: array
        tags:
          items:
            $ref: '#/components/schemas/DeviceTag'
          type: array
      required:
        - deviceIds
        - tags
      type: object
      additionalProperties: false
    FotaV2JobEvents:
      type: string
      enum:
        - CREATED
        - IN_PROGRESS
        - CANCELLED
        - DELETION_IN_PROGRESS
        - COMPLETED
    FOTAV2Job:
      properties:
        jobId:
          $ref: '#/components/schemas/JobId'
        target:
          $ref: '#/components/schemas/FotaV2JobTargetModel'
        description:
          type: string
        status:
          $ref: '#/components/schemas/FotaV2JobEvents'
        statusDetail:
          type: string
        createdAt:
          type: string
          format: date-time
        lastUpdatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        name:
          type: string
        executionStats:
          properties:
            completedExecutions:
              type: number
              format: double
            executions:
              type: number
              format: double
            timedOut:
              type: number
              format: double
            removed:
              type: number
              format: double
            inProgress:
              type: number
              format: double
            queued:
              type: number
              format: double
            rejected:
              type: number
              format: double
            failed:
              type: number
              format: double
            succeeded:
              type: number
              format: double
            cancelled:
              type: number
              format: double
          required:
            - completedExecutions
            - executions
            - timedOut
            - removed
            - inProgress
            - queued
            - rejected
            - failed
            - succeeded
            - cancelled
          type: object
        firmware:
          properties:
            bundleId:
              $ref: '#/components/schemas/BundleId'
            host:
              type: string
            fileSize:
              type: number
              format: double
            firmwareType:
              $ref: '#/components/schemas/FirmwareTypes'
            version:
              $ref: '#/components/schemas/FirmwareVersion'
            uris:
              items:
                type: string
              type: array
          required:
            - bundleId
            - host
            - fileSize
            - firmwareType
            - version
            - uris
          type: object
      required:
        - jobId
        - target
        - status
        - executionStats
        - firmware
      type: object
      additionalProperties: false
    PaginatedResult_FOTAV2Job_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/FOTAV2Job'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    AssistanceResponseBuffer:
      type: string
      format: byte
      example: <Buffer>
      description: Chunk of the file according to the request Range header.
    RequestType:
      description: Type of data to be returned. Deprecated because the requestType is inferred from the request data.
      enum:
        - rtLocation
        - rtAssistance
        - custom
      type: string
    NrfMessageType:
      description: The possible types of AGPS data.
      enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        - 7
        - 8
        - 9
        - 10
        - 11
        - 12
        - 13
      type: number
    Mcc:
      type: integer
      format: int32
      example: 310
      description: Mobile Country Code. As defined in <a href="https://www.itu.int/dms_pub/itu-t/opb/sp/T-SP-E.212B-2018-PDF-E.pdf" target="_blank">ITU-T E.212</a>.
    Mnc:
      anyOf:
        - type: number
          format: double
        - type: string
      example: '''01'' | 120'
      description: 'Mobile Network Code. A number or string: 120 | 1 | "001" | "01" | "000". As defined in <a href="https://www.itu.int/dms_pub/itu-t/opb/sp/T-SP-E.212B-2018-PDF-E.pdf" target="_blank">ITU-T E.212</a>.'
    Tac:
      type: integer
      format: int32
      example: 13601
      description: Tracking Area Code (TAC). Identifies a group of LTE cells in a certain region (Tracking Area). See <a href="https://www.etsi.org/deliver/etsi_ts/123000_123099/123003/17.09.00_60/ts_123003v170900p.pdf" target="_blank">ETSI TS 123 003, section 19.4.2.3</a> for more details.
    Eci:
      type: integer
      format: int32
      example: 167899669
      description: E-UTRA Cell Identifier (ECI), 28 bits (20 bits eNodeB and 8 bits Cell ID). Calculated using "(eNodeB-ID * 256) + Sector-ID". Range 0 .. 268435455. See <a href="https://www.etsi.org/deliver/etsi_ts/123000_123099/123003/17.09.00_60/ts_123003v170900p.pdf" target="_blank">ETSI TS 123 003, section 19.6</a> for more details.
    Rsrp:
      type: number
      format: double
      example: -90
      description: Reference Signal Received Power. Measured in dBm. See <a href="https://www.rfwireless-world.com/Terminology/LTE-RSRP-vs-RSRQ.html" target="_blank">this page</a> for more details. Range -157..-44
    FilteredEphemerisFlag:
      type: boolean
      example: true
      description: |-
        Send this flag if you want to receive ephemeris for only satellites in view.
        nRF Cloud will return ephemeris for up to 16 satellites. Cell data
        (eci, mcc, mnc, tac) is required. Defaults to false.
    SatelliteMaskAngle:
      type: number
      format: double
      example: 5
      description: |-
        Filtered ephemeris mask angle. Only works in conjunction with the filtered
        flag. Controls the mask angle for which the satellites are filtered. Range 0..90
        Defaults to 5
    AssistanceBuffer:
      properties: {}
      type: object
      additionalProperties: false
    LocationServiceType.MCELL:
      enum:
        - MCELL
      type: string
    LocationServiceType.SCELL:
      enum:
        - SCELL
      type: string
    LocationServiceType.MCELL_EVAL:
      enum:
        - MCELL_EVAL
      type: string
    LocationServiceType.SCELL_EVAL:
      enum:
        - SCELL_EVAL
      type: string
    CellServiceType:
      anyOf:
        - $ref: '#/components/schemas/LocationServiceType.MCELL'
        - $ref: '#/components/schemas/LocationServiceType.SCELL'
        - $ref: '#/components/schemas/LocationServiceType.MCELL_EVAL'
        - $ref: '#/components/schemas/LocationServiceType.SCELL_EVAL'
    Latitude:
      type: number
      format: double
      example: 45.524098
      description: Global grid line, north to south. Vertical.
    Longitude:
      type: number
      format: double
      example: -122.688408
      description: Global grid line, east to west. Horizontal.
    Uncertainty:
      type: integer
      format: int32
      example: 300
      description: Radius of the uncertainty circle around the location in meters. Also known as Horizontal Positioning Error (HPE).
    PositionResponse:
      properties:
        lat:
          $ref: '#/components/schemas/Latitude'
        lon:
          $ref: '#/components/schemas/Longitude'
        uncertainty:
          $ref: '#/components/schemas/Uncertainty'
      required:
        - lat
        - lon
        - uncertainty
      type: object
      additionalProperties: false
    CellResponseWithFulfillment:
      properties:
        lat:
          $ref: '#/components/schemas/Latitude'
        lon:
          $ref: '#/components/schemas/Longitude'
        uncertainty:
          $ref: '#/components/schemas/Uncertainty'
        fulfilledWith:
          $ref: '#/components/schemas/CellServiceType'
      required:
        - lat
        - lon
        - uncertainty
        - fulfilledWith
      type: object
      additionalProperties: false
    Pci:
      type: integer
      format: int32
      example: 143
      description: 'Physical Cell Identity (PCI). Used in the physical layer of E-UTRA systems to identify a cell. Range: 0..503'
    Earfcn:
      type: integer
      format: int32
      example: 41490
      description: 'Evolved Absolute Radio Frequency Channel (E-ARFCN). Range: 0..262143. See <a href="https://www.etsi.org/deliver/etsi_ts/136100_136199/136106/17.00.00_60/ts_136106v170000p.pdf" target="_blank">ETSI TS 136 106, section 5.7.3</a> for more details.'
    TimingAdvance:
      type: number
      format: double
      example: 20000
      description: The length of time a signal takes to reach the base station from a mobile phone (half of rtt=round trip time). The units are symbols (Ts) as specified in 3GPP TS 36.211 (LTE). The expected resolution for nRF Cloud API is 1 Ts. Range 0..20512.
    Rsrq:
      type: number
      format: double
      example: -8
      description: Reference Signal Received Quality. Measured in dB. See <a href="https://www.rfwireless-world.com/Terminology/LTE-RSRP-vs-RSRQ.html" target="_blank">this page</a> for more details. Range -34.5..3.5
    TimeDiff:
      type: number
      format: double
      example: 300
      description: Milliseconds that the neighbor cell was observed after the serving cell was observed. Improves accuracy for devices in motion.
    LteNeighborMeasurement:
      description: Neighbor cell information. Can increase location accuracy when included in request.
      properties:
        earfcn:
          $ref: '#/components/schemas/Earfcn'
        pci:
          $ref: '#/components/schemas/Pci'
        eci:
          $ref: '#/components/schemas/Eci'
        rsrp:
          $ref: '#/components/schemas/Rsrp'
        rsrq:
          $ref: '#/components/schemas/Rsrq'
        timeDiff:
          $ref: '#/components/schemas/TimeDiff'
      required:
        - earfcn
        - pci
      type: object
      additionalProperties: false
    LteCell:
      description: LTE cell information. Use the 'nmr' property to send neighbor cell measurements for increased accuracy.
      properties:
        mcc:
          $ref: '#/components/schemas/Mcc'
        mnc:
          $ref: '#/components/schemas/Mnc'
        eci:
          $ref: '#/components/schemas/Eci'
        tac:
          $ref: '#/components/schemas/Tac'
        pci:
          $ref: '#/components/schemas/Pci'
        earfcn:
          $ref: '#/components/schemas/Earfcn'
        adv:
          $ref: '#/components/schemas/TimingAdvance'
        rsrp:
          $ref: '#/components/schemas/Rsrp'
        rsrq:
          $ref: '#/components/schemas/Rsrq'
        nmr:
          items:
            $ref: '#/components/schemas/LteNeighborMeasurement'
          type: array
      required:
        - mcc
        - mnc
        - eci
        - tac
      type: object
      additionalProperties: false
    CellRequest:
      properties:
        lte:
          items:
            $ref: '#/components/schemas/LteCell'
          type: array
      required:
        - lte
      type: object
      additionalProperties: false
    DoReply:
      anyOf:
        - type: boolean
        - type: number
          format: double
      description: Controls the response body. If boolean false or number 0, response body will be empty. Defaults to true.
    ObservingDevice:
      properties:
        manufacturer:
          type: string
        firmwareVersion:
          type: string
        modemVersion:
          type: string
        id:
          type: string
      type: object
      additionalProperties: false
    Timestamp:
      type: string
      example: '2021-03-07T21:02:51.907Z'
    LteCellObservation:
      properties:
        mcc:
          $ref: '#/components/schemas/Mcc'
        mnc:
          $ref: '#/components/schemas/Mnc'
        eci:
          $ref: '#/components/schemas/Eci'
        tac:
          $ref: '#/components/schemas/Tac'
        pci:
          $ref: '#/components/schemas/Pci'
        earfcn:
          $ref: '#/components/schemas/Earfcn'
        adv:
          $ref: '#/components/schemas/TimingAdvance'
        rsrp:
          $ref: '#/components/schemas/Rsrp'
        rsrq:
          $ref: '#/components/schemas/Rsrq'
        nmr:
          items:
            $ref: '#/components/schemas/LteNeighborMeasurement'
          type: array
        observedAt:
          $ref: '#/components/schemas/Timestamp'
      required:
        - mcc
        - mnc
        - eci
        - tac
        - observedAt
      type: object
      additionalProperties: false
    WifiChannel:
      type: number
      format: double
      example: 12
    MacAddress:
      type: string
      description: String comprised of 6 hexadecimal pairs, separated by colons or dashes
    SignalStrength:
      type: number
      format: double
      example: -42
      description: Signal strength in dBm, between -128 and 0
    WifiAge:
      type: number
      format: double
      example: 500
      description: The number of milliseconds since this access point was detected.
    SignalToNoiseRatio:
      type: number
      format: double
      description: The current signal to noise ratio measured in dB.
    AccessPointWithChannelObservation:
      properties:
        macAddress:
          $ref: '#/components/schemas/MacAddress'
        ssid:
          type: string
        signalStrength:
          $ref: '#/components/schemas/SignalStrength'
        age:
          $ref: '#/components/schemas/WifiAge'
        signalToNoiseRatio:
          $ref: '#/components/schemas/SignalToNoiseRatio'
        channel:
          $ref: '#/components/schemas/WifiChannel'
        observedAt:
          $ref: '#/components/schemas/Timestamp'
      required:
        - macAddress
        - observedAt
      type: object
      additionalProperties: false
    Frequency:
      type: number
      format: double
      example: 2412
      description: Channel frequency in MHz
    AccessPointWithFrequencyObservation:
      properties:
        macAddress:
          $ref: '#/components/schemas/MacAddress'
        ssid:
          type: string
        signalStrength:
          $ref: '#/components/schemas/SignalStrength'
        age:
          $ref: '#/components/schemas/WifiAge'
        signalToNoiseRatio:
          $ref: '#/components/schemas/SignalToNoiseRatio'
        frequency:
          $ref: '#/components/schemas/Frequency'
        observedAt:
          $ref: '#/components/schemas/Timestamp'
      required:
        - macAddress
        - observedAt
      type: object
      additionalProperties: false
    AccessPointObservation:
      anyOf:
        - $ref: '#/components/schemas/AccessPointWithChannelObservation'
        - $ref: '#/components/schemas/AccessPointWithFrequencyObservation'
    Contribution:
      properties:
        lte:
          items:
            $ref: '#/components/schemas/LteCellObservation'
          type: array
        wifi:
          items:
            $ref: '#/components/schemas/AccessPointObservation'
          type: array
      type: object
      additionalProperties: false
    ObservedPosition:
      properties:
        lat:
          $ref: '#/components/schemas/Latitude'
        lon:
          $ref: '#/components/schemas/Longitude'
        uncertainty:
          $ref: '#/components/schemas/Uncertainty'
        observedAt:
          $ref: '#/components/schemas/Timestamp'
      required:
        - lat
        - lon
        - uncertainty
        - observedAt
      type: object
      additionalProperties: false
    LocationContribution:
      properties:
        device:
          $ref: '#/components/schemas/ObservingDevice'
        contributions:
          items:
            $ref: '#/components/schemas/Contribution'
          type: array
        position:
          $ref: '#/components/schemas/ObservedPosition'
      required:
        - contributions
        - position
      type: object
      additionalProperties: false
    GeoCountry:
      type: string
      example: USA
    GeoState:
      type: string
      example: Oregon
    GeoProvince:
      type: string
      example: Quebec
    GeoCity:
      type: string
      example: Portland
    GeoPostalCode:
      type: string
      example: '97123'
    ReverseGeoResponse:
      properties:
        country:
          $ref: '#/components/schemas/GeoCountry'
        stateOrProvince:
          anyOf:
            - $ref: '#/components/schemas/GeoState'
            - $ref: '#/components/schemas/GeoProvince'
        city:
          $ref: '#/components/schemas/GeoCity'
        postalCode:
          $ref: '#/components/schemas/GeoPostalCode'
      required:
        - country
        - stateOrProvince
      type: object
      additionalProperties: false
    Accuracy:
      type: number
      format: double
      example: 15
      description: Accuracy in (2D 1-sigma) in meters.
    Altitude:
      type: number
      format: double
      example: 159
      description: Altitude above WGS-84 ellipsoid in meters.
    Speed:
      type: number
      format: double
      example: 1
      description: Horizontal speed in meters per second.
    Heading:
      type: number
      format: double
      example: 90
      description: Heading of movement in degrees.
    GpsRequest:
      properties:
        lat:
          $ref: '#/components/schemas/Latitude'
        lon:
          $ref: '#/components/schemas/Longitude'
        acc:
          $ref: '#/components/schemas/Accuracy'
        alt:
          $ref: '#/components/schemas/Altitude'
        spd:
          $ref: '#/components/schemas/Speed'
        hdg:
          $ref: '#/components/schemas/Heading'
      required:
        - lat
        - lon
      type: object
      additionalProperties: {}
    NmeaSentence:
      type: string
      example: $GPGGA,141857.00,6326.27721,N,01028.07264,E,1,09,0.81,35.1,M,39.8,M,,*6B
      description: NMEA 0183 GNSS sentence. See <a href="https://www.nmea.org/nmea-0183.html" target="_blank">this page</a> for more details.
    AssistanceRequest:
      properties:
        types:
          items:
            $ref: '#/components/schemas/NrfMessageType'
          type: array
        mcc:
          $ref: '#/components/schemas/Mcc'
        mnc:
          $ref: '#/components/schemas/Mnc'
        tac:
          $ref: '#/components/schemas/Tac'
        eci:
          $ref: '#/components/schemas/Eci'
        rsrp:
          $ref: '#/components/schemas/Rsrp'
        filtered:
          $ref: '#/components/schemas/FilteredEphemerisFlag'
        mask:
          $ref: '#/components/schemas/SatelliteMaskAngle'
      type: object
      additionalProperties: false
    PgpsHost:
      type: string
      example: pgps.nrfcloud.com
      description: The protocol agnostic URL for accessing PGPS prediction files.
    PgpsFilePath:
      type: string
      example: public/15131-0_15135-72000.bin
      description: The path to the file that contains PGPS prediction data.
    PredictionCount:
      type: number
      format: double
      description: |-
        The number of predictions requested. Default is 42 (7 days, 6 predictions per day). Valid range 1..168
        The number of possible predictions rdepends on StartGpsDay and PredictionInterval
    PredictionInterval:
      type: number
      format: double
      description: 'The time between predictions (in minutes). Defaults to 240 (4 hours). Valid values are: 120,240,360,480'
    StartGpsDay:
      type: number
      format: double
      example: 15131
      description: |-
        The start day of the prediction set as GPS Day (days since the GPS epoch). Defaults to current GPS day.
        Valid range currentGpsDay..currentGpsDay + 14.
    StartGpsTime:
      type: number
      format: double
      description: The start time of the prediction set as seconds in day. Defaults to 0. Valid range 0..86399
    LocationServiceType.WIFI:
      enum:
        - WIFI
      type: string
    LocationServiceType.WIFI_EVAL:
      enum:
        - WIFI_EVAL
      type: string
    GroundFixServiceType:
      anyOf:
        - $ref: '#/components/schemas/LocationServiceType.MCELL'
        - $ref: '#/components/schemas/LocationServiceType.SCELL'
        - $ref: '#/components/schemas/LocationServiceType.WIFI'
        - $ref: '#/components/schemas/LocationServiceType.MCELL_EVAL'
        - $ref: '#/components/schemas/LocationServiceType.SCELL_EVAL'
        - $ref: '#/components/schemas/LocationServiceType.WIFI_EVAL'
    GroundFixResponseWithFulfillment:
      properties:
        lat:
          $ref: '#/components/schemas/Latitude'
        lon:
          $ref: '#/components/schemas/Longitude'
        uncertainty:
          $ref: '#/components/schemas/Uncertainty'
        fulfilledWith:
          $ref: '#/components/schemas/GroundFixServiceType'
      required:
        - lat
        - lon
        - uncertainty
        - fulfilledWith
      type: object
      additionalProperties: false
    AccessPointWithFrequency:
      properties:
        macAddress:
          $ref: '#/components/schemas/MacAddress'
        ssid:
          type: string
        signalStrength:
          $ref: '#/components/schemas/SignalStrength'
        age:
          $ref: '#/components/schemas/WifiAge'
        signalToNoiseRatio:
          $ref: '#/components/schemas/SignalToNoiseRatio'
        frequency:
          $ref: '#/components/schemas/Frequency'
      required:
        - macAddress
      type: object
      additionalProperties: false
    AccessPointWithChannel:
      properties:
        macAddress:
          $ref: '#/components/schemas/MacAddress'
        ssid:
          type: string
        signalStrength:
          $ref: '#/components/schemas/SignalStrength'
        age:
          $ref: '#/components/schemas/WifiAge'
        signalToNoiseRatio:
          $ref: '#/components/schemas/SignalToNoiseRatio'
        channel:
          $ref: '#/components/schemas/WifiChannel'
      required:
        - macAddress
      type: object
      additionalProperties: false
    AccessPoint:
      anyOf:
        - $ref: '#/components/schemas/AccessPointWithFrequency'
        - $ref: '#/components/schemas/AccessPointWithChannel'
    WifiRequest:
      items:
        $ref: '#/components/schemas/AccessPoint'
      type: array
    GroundFixRequest:
      properties:
        lte:
          items:
            $ref: '#/components/schemas/LteCell'
          type: array
        wifi:
          $ref: '#/components/schemas/WifiRequest'
      type: object
      additionalProperties: false
    WifiAccessPointsRequest:
      properties:
        accessPoints:
          items:
            $ref: '#/components/schemas/AccessPoint'
          type: array
      required:
        - accessPoints
      type: object
      additionalProperties: false
    DeprecatedWifiRequest:
      $ref: '#/components/schemas/WifiAccessPointsRequest'
    DeprecatedGroundFixRequest:
      properties:
        lte:
          items:
            $ref: '#/components/schemas/LteCell'
          type: array
        wifi:
          $ref: '#/components/schemas/DeprecatedWifiRequest'
      type: object
      additionalProperties: false
      deprecated: true
    TrackerServiceType:
      description: |-
        This is the service used to obtain the location of a device. The '_EVAL' suffix means the location was obtained using an evaluation token.
        GNSS location is derived on the device and reported back to the cloud. 'GPS' type has been deprecated, but will still return for older records.
      enum:
        - GNSS
        - GPS
        - MCELL
        - MCELL_EVAL
        - SCELL
        - SCELL_EVAL
        - WIFI
        - WIFI_EVAL
      type: string
    TrackerLatitude:
      type: string
      example: '45.524098'
      description: GPS latitude.
    TrackerLongitude:
      type: string
      example: '-122.688408'
      description: GPS Longitude.
    GnssMeta:
      description: Metadata sent from device when reporting GNSS location in PVT format. Can include other non-gnss related key/value pairs for easy retrieval later. Only populated for GNSS PVT formatted fixes, empty object otherwise.
      properties:
        acc:
          $ref: '#/components/schemas/Accuracy'
        alt:
          $ref: '#/components/schemas/Altitude'
        spd:
          $ref: '#/components/schemas/Speed'
        hdg:
          $ref: '#/components/schemas/Heading'
      required:
        - acc
        - alt
        - spd
        - hdg
      type: object
      additionalProperties: false
      example:
        acc: 233.44
        spd: 11.22
        hdg: 76.8
        alt: 12
    TrackerUncertainty:
      type: string
      example: '934'
      description: Radius of the uncertainty circle around the location in meters. Also known as Horizontal Positioning Error (HPE).
    LocationTrackerItem:
      properties:
        deviceId:
          $ref: '#/components/schemas/DeviceId'
        serviceType:
          $ref: '#/components/schemas/TrackerServiceType'
        insertedAt:
          $ref: '#/components/schemas/ISODateTimeString'
        lat:
          $ref: '#/components/schemas/TrackerLatitude'
        lon:
          $ref: '#/components/schemas/TrackerLongitude'
        meta:
          $ref: '#/components/schemas/GnssMeta'
        uncertainty:
          $ref: '#/components/schemas/TrackerUncertainty'
      required:
        - deviceId
        - serviceType
        - insertedAt
        - lat
        - lon
        - meta
        - uncertainty
      type: object
      additionalProperties: false
    PaginatedResult_LocationTrackerItem_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/LocationTrackerItem'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    SingleCellResponseBuffer:
      type: string
      format: byte
      example: <Buffer>
      description: Lat/lon/uncertainty as a binary struct.
    CellResponse:
      $ref: '#/components/schemas/PositionResponse'
    SingleCellFormat:
      description: Format of the single-cell GET endpoint request. Defaults to binary.
      enum:
        - json
        - binary
      type: string
    DeviceMessage:
      properties:
        tenantId:
          $ref: '#/components/schemas/TenantId'
          example: a5592ec1-18ae-4d9d-bc44-1d9bd927bbe9
        topic:
          $ref: '#/components/schemas/MqttTopic'
          example: prod/a5592ec1-18ae-4d9d-bc44-1d9bd927bbe9/nrf-123456/m/d/stuff
        deviceId:
          $ref: '#/components/schemas/DeviceId'
          example: nrf-123456789013456
        receivedAt:
          type: string
          format: date-time
          example: '2020-06-25T21:05:12.830Z'
        message:
          $ref: '#/components/schemas/AnyKeyedObject'
          example:
            temp: 59
            units: F
            ts: 1631557195000
      required:
        - tenantId
        - topic
        - deviceId
        - receivedAt
        - message
      type: object
      additionalProperties: false
    PaginatedResult_DeviceMessage_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/DeviceMessage'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    MessageAppId:
      type: string
      example: TEMP
      maxLength: 64
    GetParameterResult:
      properties:
        Parameter:
          properties:
            ARN:
              type: string
            LastModifiedDate:
              type: string
              format: date-time
            Version:
              type: number
              format: double
            Value:
              type: string
            Type:
              type: string
            Name:
              type: string
          type: object
      type: object
      additionalProperties: false
    AlertStatus:
      type: string
      enum:
        - ACTIVE
        - ARCHIVED
      description: |-
        ACTIVE: The alert is active and has not been resolved.
        ARCHIVED: The alert has been resolved and is no longer active.
    DeviceAlert:
      properties:
        id:
          $ref: '#/components/schemas/UUID'
          description: The unique identifier for the alert.
        deviceId:
          $ref: '#/components/schemas/DeviceId'
          description: The unique identifier for the device that the alert was triggered on.
        createdAt:
          $ref: '#/components/schemas/ISODateTimeString'
          description: |-
            The time at which the alert was triggered on the device.
            This is equivalent to the `ts` property of the original message.
        receivedAt:
          $ref: '#/components/schemas/ISODateTimeString'
          description: The time that the alert was received by the system.
        statusChangedAt:
          $ref: '#/components/schemas/ISODateTimeString'
          description: The time at which the alert's status was changed.
        statusChangedBy:
          $ref: '#/components/schemas/UUID'
          description: The user that last changed the status of the alert.
        status:
          $ref: '#/components/schemas/AlertStatus'
          description: The current status of the alert.
        originalMessage:
          additionalProperties: false
          type: object
          description: The original message sent from the device that triggered the alert.
      required:
        - id
        - deviceId
        - receivedAt
        - status
        - originalMessage
      type: object
      additionalProperties: false
    PaginatedResult_DeviceAlert_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/DeviceAlert'
          type: array
        total:
          type: integer
          format: int32
          description: |-
            Reflects the total results returned by the query, which may be less than the total number
            of items available. If the response contains a `pageNextToken` value, you can supply the
            `pageNextToken` in the next request to get more results. The maximum value of `total` is the page limit of the request,
            or ten pages if no page limit is provided.
          example: 10
          minimum: 0
        pageNextToken:
          type: string
          description: |-
            Token used to retrieve the next page of items in the list. Present in a response only if the total available results exceeds the specified limit on a page. This token does not change between requests.
            When supplying as a request parameter, use URL-encoding.
          example: 4bb1f9ab35bd
      required:
        - items
      type: object
      additionalProperties: false
    ArchivedAlert:
      allOf:
        - $ref: '#/components/schemas/DeviceAlert'
        - properties:
            statusChangedAt:
              $ref: '#/components/schemas/ISODateTimeString'
            statusChangedBy:
              $ref: '#/components/schemas/UUID'
            status:
              type: string
              enum:
                - ARCHIVED
              nullable: false
          required:
            - statusChangedAt
            - statusChangedBy
            - status
          type: object
    ActiveAlert:
      allOf:
        - $ref: '#/components/schemas/DeviceAlert'
        - properties:
            status:
              type: string
              enum:
                - ACTIVE
              nullable: false
          required:
            - status
          type: object
    FileDownloadInfo:
      properties:
        url:
          type: string
          description: The URL to download the file from.
          example: https://binarylogsbucket2142-1xw7gxky91xt5.s3.us-east-1.amazonaws.com/798978d6-ed41-4d5d-ba03-59bea8da378d
          format: url
        contentLength:
          type: number
          format: double
          description: Content length of the file in bytes.
          example: 128
      required:
        - url
        - contentLength
      type: object
      additionalProperties: false
  securitySchemes:
    SimpleToken:
      type: http
      scheme: Bearer
      description: |
        Endpoints that specify Authorizations of "SimpleToken" require you to send your API key
        in the `Authorization` header, e.g., using cURL: `-H "Authorization: Bearer
        d8be845e816e45d4a9529a6cfcd459c88e3c22b5"`. Your API key can be found in
        the Account section of nRFCloud.com.

        For more information on API keys, see
        [the API Key section](https://docs.nrfcloud.com/APIs/REST/RESTOverview.html#api-key)
        in the nRF Cloud documentation.
    JsonWebToken:
      type: http
      scheme: Bearer
      description: |
        Endpoints that specify Authorizations of "JsonWebToken" require you to send a JWT
        in the `Authorization` header, e.g., using cURL: `-H "Authorization: Bearer
        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXZpY2VJZGVudGlmaWVyIjoiZmIwOWNkZmItZTY4Yy00NGUzLWIwMTQtMmJlZDc4Yzk3OTQ5In0.RUAWePWjqRn4TK6EXsiKrsMM69FqDjg7dn52hrqG8CM"`.

        For more information on the required JWT algorithm, payload contents and how to generate JWTs, see
        [the JWT section](https://docs.nrfcloud.com/APIs/REST/RESTOverview.html#jwt)
        in the nRF Cloud documentation.
    ServiceEvaluationToken:
      type: http
      scheme: Bearer
      description: |
        Endpoints that specify Authorizations using a "ServiceEvaluationToken" may be called in the same way as
        JsonWebTokens (JWTs). For more information, see
        [the Evaluation Token section](https://docs.nrfcloud.com/APIs/REST/RESTOverview.html#evaluation-token)
        in the nRF Cloud documentation.
        This token can be obtained by calling the [GetServiceEvaluationToken](#operation/GetServiceEvaluationToken) endpoint.
info:
  title: nRF Cloud REST API
  version: v1
  description: |
    # Overview
      <a href='https://nrfcloud.com'><img
            src='https://docs.dev.nrfcloud.com/img/nrfcloud-logo-notext.svg'
            alt='nRF Cloud logo'
            style='background-color:#00A9CE;float:right;width:100px;height:100px;'/></a>The [nRF Cloud REST API](https://docs.nrfcloud.com/APIs/REST/RESTOverview.html)
            allows you to programmatically interact with, and retrieve historical information generated by, any device that you have
            connected to nRFCloud.com. This includes both IP-based devices–that is, devices that have an IP address and can talk directly to our
            IoT platform–and Bluetooth Low Energy (BLE) devices, which require the use of an IP-based device (a gateway).

    The REST API documentation is a supplement to the <a href='https://docs.nrfcloud.com'>main nRF Cloud documentation</a>.

    [DevZone](https://devzone.nordicsemi.com) is Nordic Semiconductor's official tech support site and community. 
    Get help from a dedicated tech support team and more than 25,000 other community members.

    If you are encountering unexpected behavior or errors, check the current [status](https://status.nrfcloud.com) of nRF Cloud.

    # Error Codes
    Some of the endpoints return specific error codes (called 'nRF Codes'), which can be found in this table.
      <table>
          <thead>
          <tr>
              <th style='width:10%'>nRF&nbsp;Code</th>
              <th style='width:20%'>Error</th>
              <th style='width:35%'>Reason</th>
              <th style='width:35%'>Solution</th>
          </tr>
          </thead>
          <tbody>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40000'>40000</div>
              </td>
              <td valign='top'>Bad request error.</td>
              <td valign='top'>This error could mean many things. Most of the time it means something is not as expected
                  on the cloud like a file was missing or an internal service failed.
              </td>
              <td valign='top'>Alert Nordic support by filing a ticket on <a href='https://devzone.nordicsemi.com/'
                                                                              target='_blank'>DevZone</a>.
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40001'>40001</div>
              </td>
              <td valign='top'>Device does not have a valid device certificate for associating (adding) it to your
                  account.
              </td>
              <td valign='top'>Your nRF9160 DK device or Thingy:91 device does not have a 'just-in-time provisioning' (JITP) certificate, or
                  the certificate has been corrupted.
              </td>
              <td valign='top'>Refer to the <a
                      href='https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/working_with_nrf/nrf91/nrf9160_gs.html'>
                  nRF9160 DK Getting Started Guide</a> or <a
                      href='https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/working_with_nrf/nrf91/thingy91_gsg.html'>
                  Thingy:91 Getting Started Guide</a> for information on upgrading your device certificate.
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40002'>40002</div>
              </td>
              <td valign='top'>Device cannot be dissociated (removed from your account).</td>
              <td valign='top'>The nRF9160 DK or Thingy:91 you are trying to dissociate was added to your account using the legacy
                  pairing mechanism (button and switch pattern) instead of the <code>AssociateDevice</code> <a
                          href='#operation/AssociateDevice'>endpoint</a>.
              </td>
              <td valign='top'>Delete the device from your account using either the <code>Configure</code> &gt; <code>Delete
                  Device</code> menu item on nrfcloud.com or the <code>DeleteDevice</code> <a
                      href='#operation/DeleteDevice'>endpoint</a>. If you want to re-add this device to your account you
                  will first have to flash a new device certificate and upgrade the firmware. Refer to the <a
                      href='https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/working_with_nrf/nrf91/nrf9160_gs.html'>
                  nRF9160 DK Getting Started Guide</a> or <a
                      href='https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/working_with_nrf/nrf91/thingy91_gsg.html'>
                  Thingy:91 Getting Started Guide</a> for information on how to do this.
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40005'>40005</div>
              </td>
              <td valign='top'>Usage limit exceeded.</td>
              <td valign='top'>The API request exceeds one of the monthly usage limits defined on the
                  <a href='https://nrfcloud.com/#/pricing'>Pricing page</a> for users on the free Developer plan.
              </td>
              <td valign='top'>Wait until the beginning of the next month to continue your usage on the Developer
                  plan, or upgrade to the Pro or Enterprise plan.
                  See <a href='https://docs.nrfcloud.com/AccountAndTeamManagement/Plans/PlanOverview.html'>
                  nRF Cloud plans</a> to learn about the available plans, how to view your plan details and usage,
                  and how to upgrade your plan.
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40100'>40100</div>
              </td>
              <td valign='top'>Access denied error.</td>
              <td valign='top'>The user making the request does not have access to the requested resource (device, SIM,
                  invitation, etc.).
              </td>
              <td valign='top'>Confirm your API Key is correct.</td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40101'>40101</div>
              </td>
              <td valign='top'>Device is already associated with another account.</td>
              <td valign='top'>Another user has already added this device to their account.</td>
              <td valign='top'>If you know the other account owner you can request that they dissociate the device so that
                  you can add it to your account. Otherwise, this operation is not allowed.
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40102'>40102</div>
              </td>
              <td valign='top'>The ownership code is invalid for this device.</td>
              <td valign='top'>You entered the wrong ownership code (PIN or HWID) that is printed on the Nordic
                  Semiconductor product label, or which you submitted when creating a new device certificate.
              </td>
              <td valign='top'>Verify the PIN or HWID and enter it correctly.</td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40103'>40103</div>
              </td>
              <td valign='top'>This device is not associated with your account.</td>
              <td valign='top'>The device you want to dissociate (remove from your account) is not found in your
                  account.
              </td>
              <td valign='top'>None. You are not allowed to do this.</td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40410'>40410</div>
              </td>
              <td valign='top'>Entity not found.
              </td>
              <td valign='top'>This error can be thrown for a variety of reasons, indicating that the entity could not be found by its ID. The entity could be a device, a certificate, or an API key, for example.
              </td>
              <td valign='top'>Refer to the associated message for details. For devices, confirm the device id you entered matches your existing device ID and that the device has not been deleted. 
                  You can confirm using the <a href="/v1#operation/ListDevices">ListDevices endpoint</a>.
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40411'>40411</div>
              </td>
              <td valign='top'>A Nordic Semiconductor product with this device id and ownership code could not be found.
              </td>
              <td valign='top'>The device id you entered matches the format for a Nordic Semiconductor product, but the
                  device id and/or ownership code cannot be found in our system.
              </td>
              <td valign='top'>Compare the values you entered with what is printed on your product's label (for devices
                  with <code>IMEI</code> printed on the label, the device id will be <code>nrf-[IMEI]</code>, e.g., <code>nrf-123456789012345</code>).
                  If you submitted the correct values, please contact Nordic Semiconductor Tech Support for further
                  assistance.
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40412'>40412</div>
              </td>
              <td valign='top'>No device found for this id. The device has not yet been provisioned.</td>
              <td valign='top'>The device cannot be found in the device registry, i.e., it is not 'known' by the IoT cloud
                  platform. Possible reasons:<br><br>
                  <ol>
                      <li>You entered the device id and/or ownership code (PIN or HWID) incorrectly.
                      <li>Before attempting association, you did not wait for the LEDs to indicate the device was
                          provisioned.
                      </li>
                      <li>Corrupt modem firmware.</li>
                      <li>Corrupt, wrongly flashed, or illegitimate device certificates.</li>
                      <li>Poor LTE connection</li>
                  </ol>
              </td>
              <td valign='top'>Solutions that match the possible reasons are listed here. For items 2-4, refer to the <a
                      href='https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/working_with_nrf/nrf91/nrf9160_gs.html'>
                  nRF9160 DK Getting Started Guide</a> or <a
                      href='https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/working_with_nrf/nrf91/thingy91_gsg.html'>
                  Thingy:91 Getting Started Guide</a>.<br><br>
                  <ol>
                      <li>Verify the values and try again. For Nordic Semiconductor products, please see the solution for
                          nRF Code 40411, above.
                      <li>Check the LED status indicators to ensure the device indicates it was provisioned.</li>
                      <li>(Re-)flash the latest modem firmware.</li>
                      <li>Flash new device certificates obtained from the <code>CreateDeviceCertificate</code> <a
                              href='#operation/CreateDeviceCertificate'>endpoint</a>.
                      </li>
                      <li>Move to a location with a better LTE connection.</li>
                  </ol>
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40413'>40413</div>
              </td>
              <td valign='top'>No device found for this id.</td>
              <td valign='top'>You are trying to dissociate a device that is not found in your account (wrong device id),
                  or you are submitting the device's friendly name, not the id.
              </td>
              <td valign='top'>Verify you are passing the correct device id (not the friendly name you may have given
                  it).
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40414'>40414</div>
              </td>
              <td valign='top'>No device found for this id.</td>
              <td valign='top'>You are trying to delete a device that was not found in your account or in the IoT registry
                  (i.e., provisioned, but not yet added to your account).
              </td>
              <td valign='top'><em>This may not be an error</em>, because the device may already be deleted. Verify you entered
                  the correct device id and ownership code (PIN or HWID on the label). For Nordic Semiconductor products,
                  see the solution for nRF Code 40411, above.
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40420'>40420</div>
              </td>
              <td valign='top'>Resource not found.
              </td>
              <td valign='top'>This error can be thrown for a variety of reasons, indicating that a resource could not be found by its ID. The resource could be a device, a certificate, or an API key, for example.
              </td>
              <td valign='top'>Refer to the associated message for details. For devices, confirm the device id you entered matches your existing device ID and that the device has not been deleted. 
                  You can confirm using the <a href="/v1#operation/ListDevices">ListDevices endpoint</a>.
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/40499'>40499</div>
              </td>
              <td valign='top'>Not found, but no error.</td>
              <td valign='top'>The requested item(s) do not exist, but there is no error.
                  For some requests, if the list to be returned is empty, this code and an explanatory message is
                  returned instead of an empty list.
              </td>
              <td valign='top'>No action is necessary.
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/41600'>41600</div>
              </td>
              <td valign='top'>Range not satisfiable.</td>
              <td valign='top'>You are calling an endpoint that uses the Range header and the byte range does not exist in
                  the target file or the range header itself is malformed.
              </td>
              <td valign='top'>Check the expected file size for the target file and ensure the range requested exists.
                  Refer to the <a href='https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range' target='_blank'>range
                      header docs</a> for more information.
              </td>
          </tr>
          <tr>
              <td valign='top'>
                  <div data-section-id='section/Error-Codes/42200'>42200</div>
              </td>
              <td valign='top'>Validation failed.</td>
              <td valign='top'>You are calling an endpoint with invalid request data.</td>
              <td valign='top'>Check the expected request format and try again.</td>
          </tr>
          </tbody>
      </table>
  x-logo:
    url: https://www.nordicsemi.com/svg/Logo_Trans_RGB_Vertical-optimized.svg
    altText: nRF Cloud logo
    backgroundColor: '#FFFFFF'
    href: https://www.nordicsemi.com
openapi: 3.0.0
paths:
  /account:
    get:
      operationId: FetchAccountInfo
      responses:
        '200':
          description: Contains account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInfoArgs'
      description: |-
        Fetch information about your team (also known as tenant), your team's current plan, and your user role and permissions for that team. Only team owners are allowed to view current month costs.
        The API key you use as the Bearer token in this request is specific to one team. You have one API key for each team of which you are a member.
      summary: FetchAccountInfo
      tags:
        - Account
      security:
        - SimpleToken: []
      parameters: []
  /account/invoices:
    get:
      operationId: ListInvoices
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_InvoiceResponse_'
      description: List invoices for your team (also known as tenant). Only team owners are allowed to view invoices.
      summary: ListInvoices
      tags:
        - Account
      security:
        - SimpleToken: []
      parameters:
        - in: query
          name: pageLimit
          required: false
          schema:
            $ref: '#/components/schemas/PageLimit'
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
  /account/usage:
    get:
      operationId: ListApiUsage
      responses:
        '200':
          description: Contains a detailed list of API usage data for a specified date range
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_Omit_ApiUsageMetricRecord.tenantId__'
      description: |-
        Retrieve a list of your daily or monthly usage of nRF Cloud commercial services for a specified date range. For daily usage metrics,
        pass a date range in YYYY-MM-DD format. Otherwise, use the YYYY-MM format to receive monthly usage metrics.

        The list will not contain any records for 0 usage. In other words, a daily (or monthly) record is only returned if usage occurred on that day (or during that month).

        As of June 2022 we do not keep a record of the number of devices in your account at the end of each day. Therefore, the response will only
        contain usage records for Location Services, Firmware-over-the-air (FOTA) job executions, and stored device messages. This may change
        in the future.

        The following example illustrates how to retrieve a list of daily metrics. If you prefer monthly metrics, you would change this example to use `inclusiveStart=2022-01&exclusiveEnd=2022-03`.
        ```sh
        curl -G $API_HOST/v1/account/usage -d "inclusiveStart=2022-01-01&exclusiveEnd=2022-03-01" -H "Authorization: Bearer $API_KEY" -H "Content-Type: application/json"
        ```
        By default records are sorted by date in ascending order. Set `pageSort=desc` to sort in descending order.
      summary: ListApiUsage
      tags:
        - Account
      security:
        - SimpleToken: []
      parameters:
        - in: query
          name: inclusiveStart
          required: true
          schema:
            $ref: '#/components/schemas/UsageMetricDate'
        - in: query
          name: exclusiveEnd
          required: true
          schema:
            $ref: '#/components/schemas/UsageMetricDate'
        - in: query
          name: pageSort
          required: false
          schema:
            $ref: '#/components/schemas/PageSort'
        - in: query
          name: pageLimit
          required: false
          schema:
            $ref: '#/components/schemas/PageLimit'
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
  /account/usage/summary:
    get:
      operationId: FetchApiUsageSummary
      responses:
        '200':
          description: Contains a summary of current API usage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUsageMetricsSummary'
      description: |-
        Fetch a summary of your usage of nRF Cloud commercial services for the current and previous month.

        In the response, `currentDevices` is the current number for each main type of device in your account. It is thus a snapshot metric, and can fluctuate. The other metrics are cumulative for the month, and reset on the first of each month.

        ```sh
        curl -G $API_HOST/v1/account/usage/summary -H "Authorization: Bearer $API_KEY" -H "Content-Type: application/json"
        ```
      summary: FetchApiUsageSummary
      tags:
        - Account
      security:
        - SimpleToken: []
      parameters: []
  /account/certificates:
    post:
      operationId: CreateAccountDeviceAndCertificate
      responses:
        '201':
          description: Successfully created an account device and certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceCertificate'
      description: |-
        <div style="background-color: #f8d7da; color: #721c24; text-align: center; border: 1px solid #f5c6cb; border-radius: .25rem; padding: .75rem 1.25rem">This endpoint has been deprecated. Please use the <a href="#operation/CreateAccountDevice">CreateAccountDevice endpoint</a> instead.</div>

        Provision a device and attach an IoT policy with permissions that grant access to MQTT topics for any device in your account.
        This type of device can be useful in apps that need an MQTT client to monitor the messages on other devices, or for debugging and testing purposes.
      summary: CreateAccountDeviceAndCertificate
      tags:
        - Account
      deprecated: true
      security:
        - SimpleToken: []
      parameters: []
    get:
      operationId: ListAccountDeviceCertificates
      responses:
        '200':
          description: A paginated list of certificates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_CertificateListItem_'
      description: |-
        <div style="background-color: #f8d7da; color: #721c24; text-align: center; border: 1px solid #f5c6cb; border-radius: .25rem; padding: .75rem 1.25rem">This endpoint has been deprecated. Please use the <a href="#operation/GetAccountDeviceCertificate">GetAccountDeviceCertificate endpoint</a> instead.</div>

        List certificates for account devices.
      summary: ListAccountDeviceCertificates
      tags:
        - Account
      deprecated: true
      security:
        - SimpleToken: []
      parameters:
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
  /account/certificates/{certificateId}:
    delete:
      operationId: DeleteAccountDeviceAndCertificate
      responses:
        '202':
          description: An empty response
      description: |-
        <div style="background-color: #f8d7da; color: #721c24; text-align: center; border: 1px solid #f5c6cb; border-radius: .25rem; padding: .75rem 1.25rem">This endpoint has been deprecated. Please use the <a href="#operation/DeleteAccountDevice">DeleteAccountDevice endpoint</a> instead.</div>

        Delete an account device and its certificate.
      summary: DeleteAccountDeviceAndCertificate
      tags:
        - Account
      deprecated: true
      security:
        - SimpleToken: []
      parameters:
        - in: path
          required: true
          name: certificateId
          schema:
            type: string
  /account/service-key-and-token:
    post:
      operationId: GenerateServiceKeyAndToken
      responses:
        '200':
          description: Returns a token (JWT) and the private key that signed it.
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/PrivateKey'
                  token:
                    $ref: '#/components/schemas/ServiceKeyJwt'
                required:
                  - key
                  - token
                type: object
      description: |-
        Creates a new service key pair for authenticating REST endpoints that support JWTs. The public key is stored in nRF Cloud for use in JWT verification. The response contains the private key and a JWT signed by it, with a one year expiry. The private key can be used to generate additional JWTs with an expiry of your choice.

        <div style="background-color: #fff3cd; color: #856404; text-align: center; border: 1px solid #ffeeba; border-radius: .25rem; padding: .75rem 1.25rem">Calling this endpoint will overwrite an existing service key, causing any JWTs signed by the previous key to fail verification!</div>

        <div style="background-color: #fff3cd; color: #856404; text-align: center; border: 1px solid #ffeeba; border-radius: .25rem; padding: .75rem 1.25rem; margin-top: 10px;">You will not be allowed to use this service key unless you have declared proxy usage declarations for the service you intend to use.</div>
      summary: GenerateServiceKeyAndToken
      tags:
        - Account
      security:
        - SimpleToken: []
      parameters: []
  /account/service-token:
    get:
      operationId: GetServiceToken
      responses:
        '200':
          description: Returns a service token (JWT).
          content:
            application/json:
              schema:
                properties:
                  createdAt:
                    $ref: '#/components/schemas/ServiceKeyCreatedAt'
                  token:
                    $ref: '#/components/schemas/ServiceKeyJwt'
                required:
                  - createdAt
                  - token
                type: object
      description: Gets the service token. The returned token is usable for all services.
      summary: GetServiceToken
      tags:
        - Account
      security:
        - SimpleToken: []
      parameters: []
  /account/service-evaluation-token:
    post:
      operationId: GenerateServiceEvaluationToken
      responses:
        '200':
          description: Contains newly generated ServiceEvaluationToken for evaluation purposes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceKeyTokenResponse'
      description: |-
        Generates a JsonWebToken (JWT) for evaluating nRF Cloud Location Services by proxy servers. You may use this token to authenticate proxy server requests to any of the Location Service endpoints that indicate `ServiceEvaluationToken` among their Authorizations.

        Calling this endpoint for the first time will start your 30-day evaluation period,
        after which you will need to contact [Nordic Sales](https://www.nordicsemi.com/About-us/Contact-Us) if you want to extend your evaluation period, or enter into a business agreement for commercial cloud-to-cloud use.

        The JWT claims are set automatically by nRF Cloud when this token is generated. Although it can be regenerated upon request, the initial 30-day trial period remains unchanged.

        For more information see
        [JWT authentication for nRF Cloud](https://docs.nrfcloud.com/Devices/Security/JWT.html).
      tags:
        - Account
      security:
        - SimpleToken: []
      parameters: []
    get:
      operationId: GetServiceEvaluationToken
      responses:
        '200':
          description: Contains ServiceEvaluationToken for evaluation purposes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceKeyTokenResponse'
      description: |-
        Returns an existing ServiceEvaluationToken. Calling this endpoint will not start your evaluation period.
        You may create one by calling the [GenerateServiceEvaluationToken](#operation/GenerateServiceEvaluationToken) endpoint.
      tags:
        - Account
      security:
        - SimpleToken: []
      parameters: []
  /bulk-ops-requests/{bulkOpsRequestId}:
    get:
      operationId: FetchBulkOpsRequest
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOpsRequestDetails'
      description: Fetch a bulk operations request.
      summary: FetchBulkOpsRequest
      tags:
        - Bulk Ops Requests
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: bulkOpsRequestId
          required: true
          schema:
            $ref: '#/components/schemas/ULID'
  /bulk-ops-requests:
    get:
      operationId: ListBulkOpsRequests
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_BulkOpsRequestDetails_'
      description: Fetch a list of bulk operations requests.
      summary: ListBulkOpsRequests
      tags:
        - Bulk Ops Requests
      security:
        - SimpleToken: []
      parameters:
        - in: query
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/BulkOpsRequestStatus'
        - in: query
          name: startRequestedAt
          required: false
          schema:
            type: string
        - in: query
          name: endRequestedAt
          required: false
          schema:
            type: string
        - in: query
          name: pageLimit
          required: false
          schema:
            default: 10
            format: double
            type: number
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
  /devices/account:
    post:
      operationId: CreateAccountDevice
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceCertificate'
      description: |-
        Provision a device and attach an IoT policy with permissions that grant access to MQTT topics for any device in your account.
        This type of device can be useful in apps that need an MQTT client to monitor the messages on other devices, or for debugging and testing purposes.
        When a new account device (and subsequent certificate) is created, both the public AND private keys are returned.
        If an account device already exists, only the public key is returned.
        If the private key is lost, the certificate should be rotated to obtain a new public/private key pair.
      tags:
        - Account Devices
      security:
        - SimpleToken: []
      parameters: []
    get:
      operationId: GetAccountDeviceCertificate
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceCertificate'
      description: Retrieve the account device certificate if it exists.
      tags:
        - Account Devices
      security:
        - SimpleToken: []
      parameters: []
    patch:
      operationId: RotateAccountDeviceCertificate
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceCertificate'
      description: Create and attach a new certificate for an account device. Overwrite any previously associated certificate.
      tags:
        - Account Devices
      security:
        - SimpleToken: []
      parameters: []
    delete:
      operationId: DeleteAccountDevice
      responses:
        '202':
          description: ''
      description: Delete an account device and its associated certificate.
      tags:
        - Account Devices
      security:
        - SimpleToken: []
      parameters: []
  /association/{deviceId}:
    put:
      operationId: AssociateDevice
      responses:
        '202':
          description: ''
      description: |-
        Add a device to your nRF Cloud account. The association process is idempotent. You may therefore use this endpoint to update your device's `subType`. For more on the use of `subType` see the [ProvisionDevices endpoint](#operation/ProvisionDevices).
        ```sh
        curl -X PUT $API_HOST/v1/association/$DEVICE_ID -d "$DEVICE_OWNERSHIP_CODE" -H "Authorization: Bearer $API_KEY" -H "Content-Type: text/plain"
        ```
      summary: AssociateDevice
      tags:
        - IP Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: query
          name: subType
          required: false
          schema:
            $ref: '#/components/schemas/ThingType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnershipCode'
    delete:
      operationId: DissociateDevice
      responses:
        '202':
          description: ''
      description: |-
        <div style="background-color: #f8d7da; color: #721c24; text-align: center; border: 1px solid #f5c6cb; border-radius: .25rem; padding: .75rem 1.25rem">This endpoint has been deprecated. Please use the <a href="#operation/DeleteDevice">DeleteDevice endpoint</a> instead.</div>

        Remove a device from your nRF Cloud account. This does not delete (unprovision) it on nRF Cloud.
        ```sh
        curl -X DELETE $API_HOST/v1/association/$DEVICE_ID -H "Authorization: Bearer $API_KEY"
        ```
      summary: DissociateDevice
      tags:
        - IP Devices
      deprecated: true
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
  /devices/{deviceId}/certificates:
    post:
      operationId: CreateDeviceCertificate
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceCertificate'
      description: |-
        Creates a just-in-time-provisioning (JITP) certificate for a device using Nordic's registered CA certificate.
        Consider this a convenience endpoint for obtaining a device certificate, with the following disadvantages:

        1. The JITP process takes approximately 30 seconds and involves multiple connects and disconnects between your MQTT client and the AWS IoT broker.
        2. You cannot use your own CA certificate.
        3. This endpoint does not support bulk operations.
        4. You will have to explicitly [associate](/v1#operation/AssociateDevice) a JITP device with your account.

        In most cases you will want to use the [ProvisionDevices endpoint](/v1#operation/ProvisionDevices), which pre-provisions your device(s) in the cloud and supports zero-touch associations (claims) and bulk operations.

        For this JITP certificate to work properly the device must not yet be provisioned (created) on our platform. If you are creating a certificate for a device that you have already connected to our platform, please delete the device using the `DeleteDevice` [endpoint](#operation/DeleteDevice) before using this certificate.

        For a Nordic Semiconductor product such as an nRF9160-DK or a Thingy-91, the `deviceId` is `nrf-[IMEI]`, e.g., `nrf-111222333444555`. The IMEI can be found on your product's label.

        If you want to create a certificate for a non-Nordic device, any `deviceId` is sufficient that does not start with `nrf-` (we recommend using a GUID).
        ```sh
        curl -X POST $API_HOST/v1/devices/$DEVICE_ID/certificates -d "$DEVICE_OWNERSHIP_CODE" -H "Authorization: Bearer $API_KEY" -H "Content-Type: text/plain"
        ```
      summary: CreateDeviceCertificate
      tags:
        - IP Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnershipCode'
  /devices/{deviceId}/characteristics/{characteristicId}:
    get:
      operationId: FetchCharacteristicValue
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                items:
                  type: number
                  format: double
                type: array
      description: Fetch the latest characteristic value that is cached as part of the device state in our database. It may not fetch the latest characteristic value that is on the device (which can take a quite long to retrieve directly via a REST). Therefore, this value can be stale. If you want the latest it is best to first call the `StartPeripheralDiscovery` [endpoint](#operation/StartPeripheralDiscovery) to force a rediscovery of the BLE device state.
      summary: FetchCharacteristicValue
      tags:
        - Bluetooth Low Energy Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: path
          name: characteristicId
          required: true
          schema:
            $ref: '#/components/schemas/CharacteristicId'
    put:
      operationId: UpdateCharacteristicValue
      responses:
        '202':
          description: ''
      summary: UpdateCharacteristicValue
      tags:
        - Bluetooth Low Energy Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: path
          name: characteristicId
          required: true
          schema:
            $ref: '#/components/schemas/CharacteristicId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                type: number
                format: double
              type: array
  /devices/{deviceId}/characteristics/{characteristicId}/descriptors/{descriptorId}:
    get:
      operationId: FetchCharacteristicDescriptorValue
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                items:
                  type: number
                  format: double
                type: array
      description: Fetch the latest characteristic descriptor value that is cached as part of the device state in our database. It may not fetch the latest characteristic descriptor value that is on the device (which can take a quite long to retrieve directly via a REST). Therefore, this value can be stale. If you want the latest it is best to first call the `StartPeripheralDiscovery` [endpoint](#operation/StartPeripheralDiscovery) to force a rediscovery of the BLE device state.
      summary: FetchDescriptorValue
      tags:
        - Bluetooth Low Energy Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: path
          name: characteristicId
          required: true
          schema:
            $ref: '#/components/schemas/CharacteristicId'
        - in: path
          name: descriptorId
          required: true
          schema:
            $ref: '#/components/schemas/DescriptorId'
    put:
      operationId: UpdateCharacteristicDescriptorValue
      responses:
        '202':
          description: ''
      summary: UpdateDescriptorValue
      tags:
        - Bluetooth Low Energy Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: path
          name: characteristicId
          required: true
          schema:
            $ref: '#/components/schemas/CharacteristicId'
        - in: path
          name: descriptorId
          required: true
          schema:
            $ref: '#/components/schemas/DescriptorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                type: number
                format: double
              type: array
  /devices:
    post:
      operationId: ProvisionDevices
      responses:
        '202':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  bulkOpsRequestId:
                    $ref: '#/components/schemas/ULID'
                required:
                  - bulkOpsRequestId
                type: object
        '422':
          description: Validation Failed
      description: |-
        [Provision](https://docs.nrfcloud.com/Devices/Associations/Provisioning.html) and associate one or more devices with your nRF Cloud account by posting CSV data.

        Unlike the [CreateDeviceCertificate endpoint](#operation/CreateDeviceCertificate), this endpoint involves your own CA certificate and
        requires you to upload device certificates that you have already obtained, whether via a CSR produced by the `AT%KEYGEN` command
        (modem firmware v1.3+), or offline via your own script. We impose no rules on your CA certificate, and a self-signed certificate may be used.
        For more information see [Provisioning](https://docs.nrfcloud.com/Devices/Associations/Provisioning.html) in the nRF Cloud documentation.

        Whether using our APIs via REST or MQTT you will need to flash to your device:
        1. <a href="https://www.amazontrust.com/repository/AmazonRootCA1.pem" target="_blank">The Amazon Root CA1 PEM file</a>, which enables the device to authenticate the AWS IoT server.
        2. The private key associated with the device certificate.

        Additionally, if the device will be using MQTT, you will also need to flash the device certificate. For [signing JWTs](https://docs.nrfcloud.com/Devices/Security/JWT.html) you will use the private key associated
        with the certificate. (During the device provisioning process we extract the corresponding public key from your uploaded certificate and use this for JWT signature verification.)

        This endpoint supports [asynchronous bulk operations](#tag/Bulk-Ops-Requests). Your data will be validated, and if valid, you
        will receive an HTTP 202 response with a `bulkOpsRequestId`. You can use this id with the bulk ops endpoints
        to track the request's processing status. If the bulk ops request indicates FAILED status, check the JSON errors file (URL in the bulk
        ops request details), fix the offending rows, then re-submit the CSV with only those rows.

        Each CSV row must in the format `deviceId,[subType],[tags],[fwTypes],"certPem"`, where:

        |Field|Required?|Description|Validation Pattern|
        |---|:---:|---|---|
        |`deviceId`<div style="width:90px"></div>|Yes|A globally unique device id (UUIDs are highly recommended)|`/^[a-z0-9:_-]{1,128}$/i`|
        |`subType`|No|A custom [device type](https://docs.nrfcloud.com/Devices/Properties/Types.html) (for example `humidity-sensor`) to help you better recognize or categorize your devices. Include "gateway" in your subType if you want to provision it as a `Gateway`. This will give the device additional MQTT permissions for gateway-related topics. Otherwise, it is provisioned as a `Generic` device.|`/[a-zA-Z0-9_.,@\/:#-]{0,799}/`|
        |`tags`|No|A list of pipe-delimited tags to create groups of devices (e.g., `warehouse\|sensor\|east`)|Each tag:<br/>`/^[a-zA-Z0-9_.@:#-]+$/`|
        |`fwTypes`|No|A list of pipe-delimited firmware types that each device supports for FOTA (e.g., `APP\|MODEM`)|Each type:<br/>`/^(APP\|MODEM\|BOOT\|SOFTDEVICE\|BOOTLOADER\|MDM_FULL)$/`|
        |`certPem`|Yes|A unique [ES256](https://ldapwiki.com/wiki/Wiki.jsp?page=ES256) X.509 certificate in PEM format, wrapped in double quotes (to allow for line breaks in CSV)|`/^-{5}BEGIN CERTIFICATE-{5}(\r\n\|\r\|\n)([^-]+)(\r\n\|\r\|\n)-{5}END CERTIFICATE-{5}(\r\n\|\r\|\n)$/`|

        Examples of CSV rows:
           #### All values set
        <span style="font-family:Courier">f69c0e45-7f04-4949-8def-bb2215b4223e,my-thing-type,tag1|tag2,APP|MODEM,"-----BEGIN CERTIFICATE-----<br/>MIIB7DCCAZMCFD...Av3CVgjzn5BLS03X7lyf4w==<br/>
        -----END CERTIFICATE-----<br/>"</span>
           #### `subType` not set
        <span style="font-family:Courier">f69c0e45-7f04-4949-8def-bb2215b4223e,,tag1|tag2,APP|MODEM,"-----BEGIN CERTIFICATE-----<br/>MIIB7DCCAZMCFD...Av3CVgjzn5BLS03X7lyf4w==<br/>
        -----END CERTIFICATE-----<br/>"</span>
           #### `subType` and `tags` not set, but supported `fwTypes` are set
        <span style="font-family:Courier">f69c0e45-7f04-4949-8def-bb2215b4223e,,,APP|MODEM,"-----BEGIN CERTIFICATE-----<br/>MIIB7DCCAZMCFD...Av3CVgjzn5BLS03X7lyf4w==<br/>
        -----END CERTIFICATE-----<br/>"</span>

        Also note:
           * Max number of rows is 1000.
           * Do not use a header.
           * Do not leave any blank lines.

        Example of uploading CSV data as a binary file:

        ```sh
        curl -X POST $API_HOST/v1/devices \
        --data-binary @$PATH_TO_CSV_FILE \
        -H "Content-Type: application/octet-stream" \
        -H "Authorization: Bearer $API_KEY"
        ```
        Note that for some unknown reason, curl will strip the final line break in each ES256 cert when sending the CSV file using a non-binary content-type, e.g., using syntax such as `-d @$PATH_TO_CSV_FILE -H "Content-Type: text/csv"`. Therefore, with curl use `--data-binary` only. If you want to send the CSV as text, use a REST client like Postman or Insomnia.
      summary: ProvisionDevices
      tags:
        - IP Devices
      security:
        - SimpleToken: []
      parameters:
        - in: header
          name: content-type
          required: true
          schema:
            $ref: '#/components/schemas/RestApiPayloadContentTypeWithCsv'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionDevicesPayload'
    get:
      operationId: ListDevices
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_Device-or-JSONataTransformedResponse_'
      description: Fetch a list of devices associated with the team defined by your API key.
      summary: ListDevices
      tags:
        - All Devices
      security:
        - SimpleToken: []
      parameters:
        - description: If false (the default), the device’s state is not returned, but only the device metadata. This allows you to keep the response size small if needed.
          in: query
          name: includeState
          required: false
          schema:
            default: false
            type: boolean
        - description: If false (the default), the metadata for an IP-based device's state (i.e., timestamps reflecting each property's last updated time) are not returned.
          in: query
          name: includeStateMeta
          required: false
          schema:
            default: false
            type: boolean
        - description: 'Not a true array of strings, but rather a JSONata expression such as `id` or `{ "id": id, "type": type }`. For more information see [Transforming JSON Responses guide](https://docs.nrfcloud.com/APIs/REST/Tutorials/Transforms.html).'
          in: query
          name: transform
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: pageLimit
          required: false
          schema:
            $ref: '#/components/schemas/PageLimit'
        - description: If specified, only return devices that have one of these tags AND are accessible by the user's Role and their assigned Device Groups (tags)
          in: query
          name: tags
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DeviceTag'
        - description: If specified, only return devices with matching identifiers
          in: query
          name: deviceIds
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DeviceId'
        - in: query
          name: deviceIdentifiers
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DeviceId'
          deprecated: true
        - description: If specified, only return devices that support the given firmware types
          in: query
          name: firmwareSupport
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FirmwareTypes'
        - in: query
          name: firmwareSupportExclude
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FirmwareTypes'
        - in: query
          name: bleFirmwareSupport
          required: false
          schema:
            type: boolean
        - in: query
          name: deviceTypes
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/deviceTypes'
        - in: query
          name: gatewayId
          required: false
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: query
          name: subTypes
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ThingType'
        - in: query
          name: deviceNameFuzzy
          required: false
          schema:
            type: string
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
  /devices/public-keys:
    post:
      operationId: RegisterPublicKeys
      responses:
        '202':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  bulkOpsRequestId:
                    $ref: '#/components/schemas/ULID'
                required:
                  - bulkOpsRequestId
                type: object
        '422':
          description: Validation Failed
      description: |-
        Register one or more public keys so that the signatures for [JsonWebTokens (JWTs)](https://docs.nrfcloud.com/Devices/Security/JWT.html) sent by the device can be verified.

        This endpoint supports two main use cases:
        1. Devices that <strong>are not provisioned</strong> on nRF Cloud that also want to consume Location Service endpoints over REST. This requires [JWT authentication](https://docs.nrfcloud.com/Devices/Security/JWT.html). Please note:
        <ol type="a">
        <li>Unlike Location Services, REST-based consumption of Firmware Over-the-Air Update endpoints requires cloud-provisioning. We recommend using the <a href="/v1#operation/ProvisionDevices">ProvisionDevices endpoint</a>.
        <li>You are still able to cloud-provision devices for which you have registered public keys. There is no conflict there.
        <li>Devices that are not provisioned on nRF Cloud cannot use MQTT.
        </ol>
        2. Devices that <strong>are [provisioned](https://docs.nrfcloud.com/Devices/Associations/Provisioning.html)</strong> on nRF Cloud that want to use a dedicated private key for signing JWTs instead of using the key associated
        with its cloud-provisioning certificate (e.g., they were provisioned with the [ProvisionDevices endpoint](#operation/ProvisionDevices),
        which automatically extracts and stores a public key during the provisioning process for use in subsequent JWT signature verifications).

        Only one public key may be registered for each device. Uploading CSV data with a different key for the same device will overwrite the existing key.

        Public keys must be [ES256](https://ldapwiki.com/wiki/Wiki.jsp?page=ES256). For more information, see the [nRF Cloud REST Authentication documentation](https://docs.nrfcloud.com/APIs/REST/RESTOverview.html#authentication).

        This endpoint supports [asynchronous bulk operations](#tag/Bulk-Ops-Requests). Your data will be validated, and if valid, you
        will receive an HTTP 202 response with a `bulkOpsRequestId`. You can use this id with the bulk ops endpoints
        to track the request's processing status. If the bulk ops request indicates FAILED status, check the JSON errors file (URL in the bulk
        ops request details), fix the offending rows, then re-submit the CSV with only those rows.

        Each CSV row must in the format `deviceId,"keyPem"`, where:

        |Field|Required|Description|Validation Pattern|
        |---|:---:|---|---|
        |`deviceId`<div style="width:90px"></div>|Yes|A globally unique device id (UUIDs are highly recommended)|`/^[a-z0-9:_-]{1,128}$/i`|
        |`keyPem`|Yes|A unique [ES256](https://ldapwiki.com/wiki/Wiki.jsp?page=ES256) public key in PEM format, wrapped in double quotes (to allow for line breaks in CSV)|`/^-{5}BEGIN PUBLIC KEY-{5}(\r\n\|\r\|\n)([^-]+)(\r\n\|\r\|\n)-{5}END PUBLIC KEY-{5}(\r\n\|\r\|\n)$/`|

        Example of a CSV row:
           #### All values set
        <span style="font-family:Courier">f69c0e45-7f04-4949-8def-bb2215b4223e,"-----BEGIN PUBLIC KEY-----<br/>MIIB7DCCAZMCFD...Av3CVgjzn5BLS03X7lyf4w==<br/>
        -----END PUBLIC KEY-----<br/>"</span>

        Also note:
           * Max number of rows is 1000.
           * Do not use a header.
           * Do not leave any blank lines.

        Example of uploading CSV data as a binary file:

        ```sh
        curl -X POST $API_HOST/v1/devices/public-keys \
        --data-binary @$PATH_TO_CSV_FILE \
        -H "Content-Type: application/octet-stream" \
        -H "Authorization: Bearer $API_KEY"
        ```
        Note that for some unknown reason, curl will strip the final line break in each ES256 public key when sending the CSV file using a non-binary content-type, e.g., using syntax such as `-d @$PATH_TO_CSV_FILE -H "Content-Type: text/csv"`. Therefore, with curl use `--data-binary` only. If you want to send the CSV as text, use a REST client like Postman or Insomnia.
      summary: RegisterPublicKeys
      tags:
        - IP Devices
      security:
        - SimpleToken: []
      parameters:
        - in: header
          name: content-type
          required: true
          schema:
            $ref: '#/components/schemas/RestApiPayloadContentTypeWithCsv'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPublicKeysPayload'
  /devices/tags:
    get:
      operationId: ListDeviceTags
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_DeviceTag-or-JSONataTransformedResponse_'
      description: List all device tags (groups) for your account.
      summary: ListDeviceTags
      tags:
        - All Devices
      security:
        - SimpleToken: []
      parameters:
        - in: query
          name: pageLimit
          required: true
          schema:
            $ref: '#/components/schemas/PageLimit'
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
  /devices/{deviceId}:
    delete:
      operationId: DeleteDevice
      responses:
        '202':
          description: ''
      description: |-
        Delete a device from your account. If you are attempting to delete a Nordic hardware product that was [provisioned](https://docs.nrfcloud.com/Devices/Associations/Provisioning.html) but not yet added to your account (associated), you must also pass the ownership code (PIN or HWID on the product label) in the request body.
        This will forward a DEVICE DISCON message on the /c2d MQTT topic, allowing the device to gracefully disconnect. You can [view the format here](https://github.com/nRFCloud/application-protocols/tree/v1/schemas/cloudToDevice/device).
        ```sh
        curl -X DELETE $API_HOST/v1/devices/$DEVICE_ID -d $DEVICE_OWNERSHIP_CODE -H "Authorization: Bearer $API_KEY" -H "Content-Type: text/plain"
        ```
      summary: DeleteDevice
      tags:
        - All Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnershipCode'
    get:
      operationId: FetchDevice
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/BLEDevice'
                  - $ref: '#/components/schemas/GenericDevice'
                  - $ref: '#/components/schemas/GatewayDevice'
                  - $ref: '#/components/schemas/JSONataTransformedResponse'
      description: |-
        Fetch a device and its state.
        ```sh
        curl $API_HOST/v1/devices/$DEVICE_ID -H "Authorization: Bearer $API_KEY"
        ```
      summary: FetchDevice
      tags:
        - All Devices
      security:
        - SimpleToken: []
        - JsonWebToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - description: 'Not a true array of strings, but rather a JSONata expression such as `id` or `{ "id": id, "type": type }`. For more information see [Transforming JSON Responses guide](https://docs.nrfcloud.com/APIs/REST/Tutorials/Transforms.html).'
          in: query
          name: transform
          required: false
          schema:
            type: array
            items:
              type: string
  /devices/{gatewayId}/discover/{peripheralId}:
    post:
      operationId: StartPeripheralDiscovery
      responses:
        '202':
          description: ''
      description: |-
        Initiate a discovery process for a BLE device. When discovery is complete (30-60 seconds), results will be stored
        in our database and retrievable for the device via the `FetchDevice` [endpoint](#operation/FetchDevice).
      summary: StartPeripheralDiscovery
      tags:
        - Bluetooth Low Energy Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: gatewayId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: path
          name: peripheralId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
  /devices/{deviceId}/messages:
    post:
      operationId: SendDeviceMessage
      responses:
        '202':
          description: ''
      description: |-
        Allows a user or [IP device](https://docs.nrfcloud.com/Devices/Properties/Types.html) to
        send a message that is subsequently published over an MQTT topic, on behalf of the
        IP device whose deviceId is specified. The device ID for the message comes from the topic. For instance,
        if the topic property on the request is `m/d/nrf-352656101081837/d2c/custom`, the device ID determined
        for the message will be `'nrf-352656101081837'`.
        For more information, see
        [Sending device messages](https://docs.nrfcloud.com/Devices/MessagesAndAlerts/DeviceMessages.html#sending-device-messages).
      summary: SendDeviceMessage
      tags:
        - Messages
      security:
        - SimpleToken: []
        - JsonWebToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceMessageInput'
  /devices/{deviceId}/name:
    put:
      operationId: UpdateDeviceName
      responses:
        '202':
          description: ''
      description: Update the device name. The default name is the same as the device id.
      summary: UpdateDeviceName
      tags:
        - All Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceName'
  /devices/{deviceId}/scan:
    post:
      operationId: StartScanForBLEDevices
      responses:
        '202':
          description: ''
      description: Initiate a gateway scan for BLE devices.
      summary: StartScanForBLEDevices
      tags:
        - Gateways
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BLEScanConfig'
  /devices/{deviceId}/state:
    patch:
      operationId: UpdateDeviceState
      responses:
        '202':
          description: ''
      description: |-
        Modify the device's state as stored in its shadow. You do not have to pass the entire shadow. You can update a specific portion by setting the correct JSON field path:
        ```sh
        export DEVICE_VERSION=$(curl $API_HOST/v1/devices/$DEVICE_ID -H "Authorization: Bearer $API_KEY" | jq -r '.["$meta"].version')
        curl -X PATCH $API_HOST/v1/devices/$DEVICE_ID/state -d '{ "reported": { "device": { "serviceInfo": { "fota_v1": ["BOOT"] } } } }' -H "Authorization: Bearer $API_KEY" -H "Content-Type: application/json" -H "If-Match: $DEVICE_VERSION"
        ```
      summary: UpdateDeviceState
      tags:
        - IP Devices
      security:
        - SimpleToken: []
        - JsonWebToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceStateInput'
  /devices/{deviceId}/tags:
    put:
      operationId: UpdateDeviceTags
      responses:
        '202':
          description: ''
      description: Update a device's tags. Useful for labeling, categorizing, grouping, etc.
      summary: UpdateDeviceTags
      tags:
        - All Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/DeviceTag'
              type: array
  /devices/{gatewayId}/{peripheralId}:
    put:
      operationId: AddPeripheral
      responses:
        '204':
          description: No content
      description: |-
        /**
         Initiate connection of a peripheral to a gateway by adding to the gateway's
         `desired.desiredConnections` array the peripheral id.
      summary: AddPeripheral
      tags:
        - Bluetooth Low Energy Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: gatewayId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: path
          name: peripheralId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
  /devices/{deviceId}/image:
    put:
      operationId: UpdateDeviceImage
      responses:
        '202':
          description: ''
      description: Update the image associated with a device, as displayed on nrfCloud.com. If uploading an image, add image to the request body (JPEG or PNG only). Otherwise, use the `sourceUrl` query param to set the device image to an existing image on the Web.
      summary: UpdateDeviceImage
      tags:
        - All Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: query
          name: sourceUrl
          required: false
          schema:
            $ref: '#/components/schemas/Url'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestApiPayload'
    delete:
      operationId: DeleteDeviceImage
      responses:
        '202':
          description: ''
      description: For a Web URL of an image associated with a device, dissociate the URL from the device. For an image file stored for a device, delete the image file.
      summary: DeleteDeviceImage
      tags:
        - All Devices
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
  /openapi.json:
    get:
      operationId: GetSpec
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema: {}
      tags:
        - Misc.
      security: []
      parameters: []
  /firmwares:
    post:
      operationId: UploadFirmware
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                properties:
                  uris:
                    items:
                      type: string
                    type: array
                required:
                  - uris
                type: object
      description: |-
        Upload a firmware bundle as a .zip file, whether binary or base64-encoded. The bundle must contain a manifest.json file that conforms to this JSON schema:
        ```
        {
           name?: string,
           description?: string,
           fwversion: string,
           'format-version': 1,
           files: {
             file: string,
             type: 'application' | 'mcuboot' | 'bootloader' | 'softdevice' | 'init_packet',
             size: number
           }[]
         }
        ```
        Notes:
        - `?` fields are optional
        - `files` is an array of objects, all of which should be of the same `type`.
        - `type` values `application` and `mcuboot` apply only to nRF91 FOTA. Values `softdevice` and `init_packet` apply only to Bluetooth LE FOTA.
        - For Bluetooth LE devices using FOTA, the `.zip` file must contain both the init_packet and the firmware image (application or soft device). The `type` field for the manifest must be `application` or `softdevice`, not `init_packet`.
        - `'format-version'` should always be set to `1`
        - `fwversion` is validated against this regular expression: `/^[a-zA-Z0-9._-]{1,30}$/`
        - The Zephyr build system produces dfu_application.zip in the build/zephyr folder, which contains a manifest.json plus the update binary. However, the manifest is currently generated without the required `fwversion` field, so you will need to add that field.
        - If you use the nRFCloud.com user interface to upload your zip file, you are given options to fill in the `name`, `description`, and `fwversion` fields. The UI will then properly generate the manifest.json file and zip file.
        - Although nRF Cloud supports modem FOTA, we do not allow uploading modem firmware. These updates are made available only by Nordic Semiconductor.

        An example of a valid manifest:
        ```
        {
           "name": "My application update",
           "description": "Changelog: Fixed an issue with sleep mode. Power consumption improvements.",
           "fwversion": "1.1",
           "format-version": 1,
           "files": [
               {
                   "file": "my_application_v1_1.hex.bin",
                   "type": "application",
                   "size": 695672
               }
           ]
        }
        ```
        Following are examples of uploading with curl (base64 and binary):

        ```sh
        export FILE=$(base64 path/to/my-file.zip)
        # If you get a console error such as "Argument list too long" try using a REST client like Postman.
        curl -X POST $API_HOST/v1/firmwares -H "Authorization: Bearer $API_KEY" -H "Content-Type: text/plain" -d $FILE
        ```

        ```sh
        curl -X POST $API_HOST/v1/firmwares -H "Authorization: Bearer $API_KEY" -H "Content-Type: application/zip" --data-binary @/path/to/my-file.zip
        ```
        For more information, see the [FOTA documentation](https://docs.nrfcloud.com/Devices/FirmwareUpdate/FOTAOverview.html).
      summary: UploadFirmware
      tags:
        - Firmware Bundles
      security:
        - SimpleToken: []
      parameters:
        - in: header
          name: content-type
          required: true
          schema:
            $ref: '#/components/schemas/RestApiPayloadContentTypeWithZip'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestApiPayload'
    get:
      operationId: ListFirmware
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_Firmware_'
      summary: ListFirmware
      tags:
        - Firmware Bundles
      security:
        - SimpleToken: []
      parameters:
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
        - in: query
          name: pageLimit
          required: false
          schema:
            $ref: '#/components/schemas/PageLimit'
        - description: Whether or not to return a list of modem firmware instead of the current tenant's firmware
          in: query
          name: modemOnly
          required: false
          schema:
            default: false
            type: boolean
  /firmwares/{bundleId}:
    delete:
      operationId: DeleteFirmware
      responses:
        '202':
          description: ''
      summary: DeleteFirmware
      tags:
        - Firmware Bundles
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: bundleId
          required: true
          schema:
            $ref: '#/components/schemas/BundleId'
  /fota-job-execution-statuses/{jobId}:
    get:
      operationId: ListFOTAJobExecutionStatuses
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_FOTAJobExecutionState_'
      summary: ListFOTAJobExecutionStatuses
      tags:
        - FOTA Job Executions
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            $ref: '#/components/schemas/JobId'
        - in: query
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/FotaV2JobExecutionEvents'
        - in: query
          name: pageLimit
          required: false
          schema:
            $ref: '#/components/schemas/PageLimit'
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
  /fota-job-executions/{deviceId}:
    get:
      operationId: ListFOTAJobExecutionsForDevice
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_FOTAJobExecution_'
      summary: ListFOTAJobExecutionsForDevice
      tags:
        - FOTA Job Executions
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: query
          name: pageLimit
          required: false
          schema:
            $ref: '#/components/schemas/PageLimit'
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
  /fota-job-executions/{deviceId}/current:
    get:
      operationId: FetchCurrentPendingFOTAJobExecution
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FOTAJobExecution'
      description: |-
        Fetches the pending (QUEUED or IN_PROGRESS) job execution with the earliest createdAt date. This will allow
        consistent FIFO (First In First Out) processing of incoming executions.
      summary: FetchCurrentPendingFOTAJobExecution
      tags:
        - FOTA Job Executions
      security:
        - SimpleToken: []
        - JsonWebToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - description: Return only executions with the given firmware type
          in: query
          name: firmwareType
          required: false
          schema:
            $ref: '#/components/schemas/FirmwareTypes'
  /fota-job-executions/{deviceId}/{jobId}:
    get:
      operationId: FetchFOTAJobExecution
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FOTAJobExecution'
      summary: FetchFOTAJobExecution
      tags:
        - FOTA Job Executions
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: path
          name: jobId
          required: true
          schema:
            $ref: '#/components/schemas/JobId'
    patch:
      operationId: UpdateFOTAJobExecutionStatus
      responses:
        '202':
          description: Updated FOTA job execution status
      summary: UpdateFOTAJobExecutionStatus
      tags:
        - FOTA Job Executions
      security:
        - SimpleToken: []
        - JsonWebToken: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: path
          name: jobId
          required: true
          schema:
            $ref: '#/components/schemas/JobId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                details:
                  type: string
                status:
                  $ref: '#/components/schemas/FotaV2JobExecutionEvents'
              required:
                - status
              type: object
  /fota-jobs:
    post:
      operationId: CreateFOTAJob
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                properties:
                  jobId:
                    $ref: '#/components/schemas/UUID'
                required:
                  - jobId
                type: object
      summary: CreateFOTAJob
      tags:
        - FOTA Jobs
      security:
        - SimpleToken: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobInput'
    get:
      operationId: ListFOTAJobs
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_FOTAV2Job_'
      summary: ListFOTAJobs
      tags:
        - FOTA Jobs
      security:
        - SimpleToken: []
      parameters:
        - in: query
          name: pageLimit
          required: false
          schema:
            $ref: '#/components/schemas/PageLimit'
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
  /fota-jobs/{jobId}/apply:
    post:
      operationId: ApplyFOTAJob
      responses:
        '202':
          description: ''
      summary: ApplyFOTAJob
      tags:
        - FOTA Jobs
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            $ref: '#/components/schemas/JobId'
  /fota-jobs/{jobId}:
    get:
      operationId: FetchFOTAJob
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FOTAV2Job'
      summary: FetchFOTAJob
      tags:
        - FOTA Jobs
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            $ref: '#/components/schemas/JobId'
    delete:
      operationId: DeleteFOTAJob
      responses:
        '202':
          description: ''
      description: Deletes a fota job. Does not affect executions associated with this job.
      summary: DeleteFOTAJob
      tags:
        - FOTA Jobs
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            $ref: '#/components/schemas/JobId'
  /fota-jobs/{jobId}/cancel:
    put:
      operationId: CancelFOTAJob
      responses:
        '202':
          description: ''
      summary: CancelFOTAJob
      tags:
        - FOTA Jobs
      security:
        - SimpleToken: []
      parameters:
        - in: path
          name: jobId
          required: true
          schema:
            $ref: '#/components/schemas/JobId'
        - in: query
          name: reason
          required: false
          schema:
            type: string
  /location/agps:
    get:
      operationId: GetAssistanceData
      responses:
        '206':
          description: Contains chunk of file defined by the Range header.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistanceResponseBuffer'
      description: |-


        Provides assistance data to the device. Enables a faster time-to-first-fix (TTFF) for the GPS modem. Returns the modem
        parameters for the nRF91 GPS modem in a chunk. The chunk size is determined by the request Range header. See `GetFileSize` [endpoint](#operation/GetFileSize) for details.

        __Basic Request__:
        ```sh
        curl -G $API_HOST/v1/location/agps -H "Authorization: Bearer $JWT" -H "Content-Type: application/octet-stream" -H "Range: bytes=0-2200" --output agps.bin
        ```

        __Custom Request__:
        ```sh
        curl -G "$API_HOST/v1/location/agps" -d "types=8" -d "mcc=244" -d "mnc=91" -d "tac=4099" -d "eci=36078631" -H "Authorization: Bearer $JWT" -H "Content-Type: application/octet-stream" -H "Range: bytes=0-2200" --output agps.bin
        ```
      summary: GetAssistanceData
      tags:
        - Assisted GPS
      security:
        - JsonWebToken: []
        - ServiceEvaluationToken: []
      parameters:
        - in: query
          name: requestType
          required: false
          schema:
            $ref: '#/components/schemas/RequestType'
          deprecated: true
        - description: Deprecated in favor of the 'types' param.
          in: query
          name: customTypes
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/NrfMessageType'
          deprecated: true
        - description: Types. 1 = utc parameters, 2 = ephemerides data, 3 = almanac data, 4 = klobuchar ionospheric correction, 5 = nequick ionospheric correction, 6 = gps time of week, 7 = gps system clock, 8 = location (lat/lon of cell) 9 = gps integrity info
          in: query
          name: types
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/NrfMessageType'
        - in: query
          name: mcc
          required: false
          schema:
            $ref: '#/components/schemas/Mcc'
        - in: query
          name: mnc
          required: false
          schema:
            $ref: '#/components/schemas/Mnc'
        - in: query
          name: tac
          required: false
          schema:
            $ref: '#/components/schemas/Tac'
        - in: query
          name: eci
          required: false
          schema:
            $ref: '#/components/schemas/Eci'
        - in: query
          name: rsrp
          required: false
          schema:
            $ref: '#/components/schemas/Rsrp'
        - in: query
          name: filtered
          required: false
          schema:
            $ref: '#/components/schemas/FilteredEphemerisFlag'
        - in: query
          name: mask
          required: false
          schema:
            $ref: '#/components/schemas/SatelliteMaskAngle'
        - in: header
          name: range
          required: false
          schema:
            type: string
    head:
      operationId: GetFileSize
      responses:
        '200':
          description: Body is empty. Response "Content-Length" header contains the size of the file (bytes).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistanceBuffer'
      description: |-


        This endpoint is for advanced use cases where you need to set the Range header to something other than the payload size.
        Normally you will just set the Range header to the payload limit for your modem gets the payload size of the modem
        parameters. This endpoint returns the totalBytes in the `Content-Length` response header, no body.
        The `Content-Length` header in the response can be used in the `Range` header for a subsequent `GET` request (same query string, just
        `GET` instead of `HEAD` + `Range` header).
        ```sh
        curl -I "$API_HOST/v1/location/agps" -H "Authorization: Bearer $JWT"
      summary: GetFileSize
      tags:
        - Assisted GPS
      security:
        - JsonWebToken: []
        - ServiceEvaluationToken: []
      parameters:
        - in: query
          name: requestType
          required: false
          schema:
            $ref: '#/components/schemas/RequestType'
          deprecated: true
        - description: Deprecated in favor of the 'types' param.
          in: query
          name: customTypes
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/NrfMessageType'
          deprecated: true
        - description: types. 1 = utc parameters, 2 = ephemerides data, 3 = almanac data, 4 = klobuchar ionospheric correction, 5 = nequick ionospheric correction, 6 = gps time of week, 7 = gps system clock, 8 = location (lat/lon of cell) 9 = gps integrity info
          in: query
          name: types
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/NrfMessageType'
        - in: query
          name: mcc
          required: false
          schema:
            $ref: '#/components/schemas/Mcc'
        - in: query
          name: mnc
          required: false
          schema:
            $ref: '#/components/schemas/Mnc'
        - in: query
          name: tac
          required: false
          schema:
            $ref: '#/components/schemas/Tac'
        - in: query
          name: eci
          required: false
          schema:
            $ref: '#/components/schemas/Eci'
        - in: query
          name: rsrp
          required: false
          schema:
            $ref: '#/components/schemas/Rsrp'
        - in: query
          name: filtered
          required: false
          schema:
            $ref: '#/components/schemas/FilteredEphemerisFlag'
        - in: query
          name: mask
          required: false
          schema:
            $ref: '#/components/schemas/SatelliteMaskAngle'
  /location/cell:
    post:
      operationId: GetLocationFromCells
      responses:
        '200':
          description: Returns lat/lon coordinates and uncertainty for a device using cell data.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CellResponseWithFulfillment'
                nullable: true
      description: |-
        <div style="background-color: #fff3cd; color: #856404; text-align: center; border: 1px solid #ffeeba; border-radius: .25rem; padding: .75rem 1.25rem">This endpoint has an alternative. See the <a href="#tag/Ground-Fix">ground fix endpoint</a> for more details.</div>

        Gets the lat, lon, and uncertainty values for the LTE cell(s) passed. If the optional `nmr` parameter is passed the endpoint operates in a "multi-cell" mode, using
        more than one cell to determine a more accurate location.

        __Basic Request__:
        ```sh
        curl -X POST "$API_HOST/v1/location/cell" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json" -d "{\"lte\":[{\"mcc\": 244, \"mnc\": 91,\"tac\": 4099,\"eci\":36078631}]}"
        ```

        __Save device location and silence response__:
        ```sh
        curl --verbose -X POST "$API_HOST/v1/location/cell?doReply=0" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json" -d "{\"lte\":[{\"mcc\": 244, \"mnc\": 91,\"tac\": 4099,\"eci\":36078631}]}"
        ```
      summary: GetLocationFromCells
      tags:
        - Cell Location
      security:
        - JsonWebToken: []
        - ServiceEvaluationToken: []
      parameters:
        - in: query
          name: doReply
          required: false
          schema:
            $ref: '#/components/schemas/DoReply'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CellRequest'
  /location/gnss:
    post:
      operationId: RecordGnssCoordinates
      responses:
        '202':
          description: ''
      description: |-
        Report device coordinates, commonly obtained from the device's GNSS modem.

        ```sh
        curl --location --request POST "$API_HOST/v1/location/gnss" \
        --header "Authorization: Bearer $JWT" \
        --header "Content-Type: application/json" \
        --data-raw "{\"lat\":$LAT, \"lon\":$LON, \"spd\":$SPD, \"acc\":$ACC, \"alt\":$ALT, \"hdg\":$HDG}"
        ```
      summary: RecordGnssCoordinates
      tags:
        - GNSS
      security:
        - JsonWebToken: []
        - ServiceEvaluationToken: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/GpsRequest'
                - $ref: '#/components/schemas/NmeaSentence'
  /location/ground-fix:
    post:
      operationId: GetLocationFromCellsOrWifiNetworks
      responses:
        '200':
          description: Returns lat/lon coordinates and uncertainty for a device using cell or wifi data.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GroundFixResponseWithFulfillment'
                nullable: true
      description: |-
        Gets the lat, lon, and uncertainty values for the LTE cell(s) or wifi access points passed. Wifi will be prioritized and fall back to LTE if unavailable.  At least two Access Points are required.

        Return JSON payload.

        __Basic Request__:
        ```sh
        curl -X POST "$API_HOST/v1/location/ground-fix" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json" -d "{\"lte\":[{\"mcc\": 244, \"mnc\": 91,\"tac\": 4099,\"eci\":36078631}], \"wifi\":[{\"macAddress\": \"00-18-39-59-8C-53\", \"ssid\": \"my-wifi-network\", \"signalStrength\": -42}, {\"macAddress\": \"00:21:55:61:F3:0A\", \"ssid\": \"my-other-wifi-network\", \"signalStrength\": -22}]}"
        ```

        __Save device location and silence response__:
        ```sh
        curl --verbose -X POST "$API_HOST/v1/location/ground-fix?doReply=false" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json" -d "{\"lte\":[{\"mcc\": 244, \"mnc\": 91,\"tac\": 4099,\"eci\":36078631}], \"wifi\":[{\"macAddress\": \"00-18-39-59-8C-53\", \"ssid\": \"my-wifi-network\", \"signalStrength\": -42}, {\"macAddress\": \"00:21:55:61:F3:0A\", \"ssid\": \"my-other-wifi-network\", \"signalStrength\": -22}]}"
        ```
      summary: GetLocationFromCellsOrWifiNetworks
      tags:
        - Ground Fix
      security:
        - JsonWebToken: []
        - ServiceEvaluationToken: []
      parameters:
        - in: query
          name: doReply
          required: false
          schema:
            $ref: '#/components/schemas/DoReply'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/GroundFixRequest'
                - $ref: '#/components/schemas/DeprecatedGroundFixRequest'
  /location/history:
    get:
      operationId: GetLocationHistory
      responses:
        '200':
          description: Contains JSON response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_LocationTrackerItem_'
      description: |-
        Get location history for one, all, or a group of devices specified by tags parameter.

        Notes:
        - Location history data expires after ~6 months (27 weeks)
        - The `serviceType` field is intentionally empty for location data before December 10th 2021

        __Basic Request for device history__:
        ```sh
        curl -G $API_HOST/v1/location/history -d "deviceId=$DEVICE_ID&start=2022-10-15T06:00:00.000Z&end=2022-10-16T18:30:00.000Z" -H "Authorization: Bearer $API_KEY"
        ```

        __Paginated Request__:
        ```sh
        export PAGE_NEXT_TOKEN=$(curl -G $API_HOST/v1/location/history -d "deviceId=$DEVICE_ID&start=2022-10-15T06:00:00.000Z&end=2022-10-16T18:30:00.000Z" -H "Authorization: Bearer $API_KEY" | jq .pageNextToken)

        curl -G $API_HOST/v1/location/history -d "deviceId=$DEVICE_ID" --data-urlencode "pageNextToken=$PAGE_NEXT_TOKEN" -H "Authorization: Bearer $API_KEY"
        ```

        __Request all devices location history__&dagger;:
        ```sh
        curl -G $API_HOST/v1/location/history -H "Authorization: Bearer $API_KEY"
        ```

        __Request all devices last known location__&dagger;:
        ```sh
        curl -G $API_HOST/v1/location/history -d "latest=true" -H "Authorization: Bearer $API_KEY"
        ```

        &dagger; Requires admin privileges
      summary: GetLocationHistory
      tags:
        - Location History
      security: []
      parameters:
        - description: |-
            This is the canonical device id that is an optional parameter. Specify a device id to get its location history. If a device id is not provided,
            location history for all devices are returned. You must have admin privileges to perform this operation.
          in: query
          name: deviceId
          required: false
          schema:
            $ref: '#/components/schemas/DeviceId'
        - in: query
          name: deviceIdentifier
          required: false
          schema:
            $ref: '#/components/schemas/DeviceId'
          deprecated: true
        - description: Get the last known location for all devices or a single device (if deviceId is supplied). You must have admin privileges.
          in: query
          name: latest
          required: false
          schema:
            default: false
            type: boolean
        - in: query
          name: inclusiveStart
          required: false
          schema:
            $ref: '#/components/schemas/ISODateTimeString'
          deprecated: true
        - in: query
          name: start
          required: false
          schema:
            $ref: '#/components/schemas/ISODateTimeString'
        - in: query
          name: inclusiveEnd
          required: false
          schema:
            $ref: '#/components/schemas/ISODateTimeString'
          deprecated: true
        - in: query
          name: end
          required: false
          schema:
            $ref: '#/components/schemas/ISODateTimeString'
        - in: query
          name: pageSort
          required: false
          schema:
            $ref: '#/components/schemas/PageSort'
        - in: query
          name: pageLimit
          required: false
          schema:
            $ref: '#/components/schemas/PageLimit'
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
        - description: If specified, only return location history for devices that have one of these Device Groups (tags). You must have admin privileges.
          in: query
          name: tags
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DeviceTag'
  /location/pgps:
    get:
      operationId: GetPredictedAssistanceData
      responses:
        '200':
          description: Link to the P-GPS binary payload file for download.
          content:
            application/json:
              schema:
                properties:
                  path:
                    $ref: '#/components/schemas/PgpsFilePath'
                  host:
                    $ref: '#/components/schemas/PgpsHost'
                required:
                  - path
                  - host
                type: object
      description: |-
        Generates up to two weeks of gps predictions. The predictions are used by the nRF91 GPS modem
        to enable a faster time-to-first-fix (TTFF) and provide offline navigation when out of range of an LTE cell.

        Returns a link for easy download of the predictions file.

        __Basic Request__:
        ```sh
        curl -G $API_HOST/v1/location/pgps -H "Authorization: Bearer $JWT" -H "Content-Type: application/json"
        ```
        __Custom Request__:
        ```sh
        curl -G $API_HOST/v1/location/pgps  -H "Authorization: Bearer $JWT" -H "Content-Type: application/json" -d "predictionCount=42" -d "predictionIntervalMinutes=240" -d "startGpsDay=15131" -d "startGpsTimeOfDaySeconds=0"
        ```
      summary: GetPredictedAssistanceData
      tags:
        - Predicted GPS
      security:
        - JsonWebToken: []
        - ServiceEvaluationToken: []
      parameters:
        - in: query
          name: predictionCount
          required: false
          schema:
            $ref: '#/components/schemas/PredictionCount'
        - in: query
          name: predictionIntervalMinutes
          required: false
          schema:
            $ref: '#/components/schemas/PredictionInterval'
        - in: query
          name: startGpsDay
          required: false
          schema:
            $ref: '#/components/schemas/StartGpsDay'
        - in: query
          name: startGpsTimeOfDaySeconds
          required: false
          schema:
            $ref: '#/components/schemas/StartGpsTime'
  /location/single-cell:
    get:
      operationId: GetSingleCellLocation
      responses:
        '200':
          description: Contains file-chunk or JSON response, depending on format param
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SingleCellResponseBuffer'
                  - $ref: '#/components/schemas/CellResponse'
      description: |-
        <div style="background-color: #f8d7da; color: #721c24; text-align: center; border: 1px solid #f5c6cb; border-radius: .25rem; padding: .75rem 1.25rem">This endpoint has been deprecated. Please use the <a href="#tag/Ground-Fix">ground fix endpoint</a> instead.</div>

        Gets the lat, lon, and uncertainty values based on the id of the LTE cell passed.
        Returns a binary payload or JSON, depending on the format argument. Binary by default. When returning binary, the by content-type response header is "application/octet-stream".
        ```sh
        curl -G $API_HOST/v1/location/single-cell -d "mcc=244" -d "mnc=91" -d "tac=4099" -d "eci=36078631" -d "format=json" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json"
        ```
      summary: GetSingleCellLocation
      tags:
        - Single Cell
      deprecated: true
      security:
        - JsonWebToken: []
        - ServiceEvaluationToken: []
      parameters:
        - in: query
          name: mcc
          required: true
          schema:
            $ref: '#/components/schemas/Mcc'
        - in: query
          name: mnc
          required: true
          schema:
            $ref: '#/components/schemas/Mnc'
        - in: query
          name: tac
          required: true
          schema:
            $ref: '#/components/schemas/Tac'
        - in: query
          name: eci
          required: true
          schema:
            $ref: '#/components/schemas/Eci'
        - in: query
          name: rsrp
          required: false
          schema:
            $ref: '#/components/schemas/Rsrp'
        - in: query
          name: format
          required: false
          schema:
            $ref: '#/components/schemas/SingleCellFormat'
  /location/wifi:
    post:
      operationId: GetLocationFromWifiNetworks
      responses:
        '200':
          description: Returns lat/lon coordinates and uncertainty for a device using nearby Wi-Fi networks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PositionResponse'
                nullable: true
      description: |-
        <div style="background-color: #fff3cd; color: #856404; text-align: center; border: 1px solid #ffeeba; border-radius: .25rem; padding: .75rem 1.25rem">This endpoint has an alternative. See the <a href="#tag/Ground-Fix">ground fix endpoint</a> for more details.</div>
        Get location based on nearby Wi-Fi networks. At least two Access Points are required.
      tags:
        - Wi-Fi Location
      security:
        - JsonWebToken: []
        - ServiceEvaluationToken: []
      parameters:
        - in: query
          name: doReply
          required: false
          schema:
            $ref: '#/components/schemas/DoReply'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WifiAccessPointsRequest'
  /messages:
    get:
      operationId: ListMessages
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_DeviceMessage_'
      description: |-
        Fetch historical device messages.

        Currently supported parameter combinations:

        `appId + deviceId`

        `topic + deviceId`

        `appId`

        `deviceId`

        `topic`

        Not supported:

        `appId + topic`

        `appId + topic + deviceId`

        For more information, see our [nRF Cloud documentation on device messages](https://docs.nrfcloud.com/Devices/MessagesAndAlerts/DeviceMessages.html).
      summary: ListMessages
      tags:
        - Messages
      security:
        - SimpleToken: []
      parameters:
        - in: query
          name: inclusiveStart
          required: false
          schema:
            $ref: '#/components/schemas/ISODateTimeString'
          deprecated: true
        - in: query
          name: start
          required: false
          schema:
            $ref: '#/components/schemas/ISODateTimeString'
        - in: query
          name: exclusiveEnd
          required: false
          schema:
            $ref: '#/components/schemas/ISODateTimeString'
          deprecated: true
        - in: query
          name: end
          required: false
          schema:
            $ref: '#/components/schemas/ISODateTimeString'
        - description: |-
            Filter returned messages by appId. Primarily used by Asset Tracker, AppId is taken from the "appId" property of
            the message body and is intended to represent the type of data being sent. This can be used to categorize your
            messages for easy filtering when using the same topic.
          in: query
          name: appId
          required: false
          schema:
            $ref: '#/components/schemas/MessageAppId'
        - description: A device Id to fetch messages for. Can be specified with appId or topic.
          in: query
          name: deviceId
          required: false
          schema:
            $ref: '#/components/schemas/DeviceId'
        - description: Fetch messages for a single topic. Can be specified with deviceId.
          in: query
          name: topic
          required: false
          schema:
            $ref: '#/components/schemas/MqttTopic'
        - in: query
          name: pageLimit
          required: false
          schema:
            $ref: '#/components/schemas/PageLimit'
        - in: query
          name: pageSort
          required: false
          schema:
            $ref: '#/components/schemas/PageSort'
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
  /status:
    get:
      operationId: GetSsmParamInfo
      responses:
        '200':
          description: Contains system status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetParameterResult'
      description: Get the ssm parameter which notifies the system's status (up or down for maintenance).
      tags:
        - System Status
      security: []
      parameters: []
  /alerts:
    get:
      operationId: ListDeviceAlerts
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult_DeviceAlert_'
      description: Fetch device alerts. For more information, see our [nRF Cloud documentation on device alerts](https://docs.nrfcloud.com/Devices/MessagesAndAlerts/AlertsAndLogs/AlertsOverview.html).
      summary: ListDeviceAlerts
      tags:
        - Alerts
      security:
        - SimpleToken: []
      parameters:
        - description: Fetch alerts optionally by device ids.
          in: query
          name: deviceIds
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DeviceId'
        - description: Fetch alerts optionally by Status. By default, both `ACTIVE` and `ARCHIVED` alerts are returned.
          in: query
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/AlertStatus'
        - in: query
          name: pageLimit
          required: false
          schema:
            $ref: '#/components/schemas/PageLimit'
        - in: query
          name: pageSort
          required: false
          schema:
            $ref: '#/components/schemas/PageSort'
        - in: query
          name: pageNextToken
          required: false
          schema:
            $ref: '#/components/schemas/PageNextToken'
  /alerts/{id}/archive:
    patch:
      operationId: ArchiveDeviceAlert
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedAlert'
      description: Archives an Alert. For more information, see our [nRF Cloud documentation on device alerts](https://docs.nrfcloud.com/Devices/MessagesAndAlerts/AlertsAndLogs/AlertsOverview.html).
      summary: ArchiveDeviceAlert
      tags:
        - Alerts
      security:
        - SimpleToken: []
      parameters:
        - description: The unique identifier for the alert
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
  /alerts/{id}/restore:
    patch:
      operationId: RestoreDeviceAlert
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveAlert'
      description: Restore an archived Alert. For more information, see our [nRF Cloud documentation on device alerts](https://docs.nrfcloud.com/Devices/MessagesAndAlerts/AlertsAndLogs/AlertsOverview.html).
      summary: RestoreDeviceAlert
      tags:
        - Alerts
      security:
        - SimpleToken: []
      parameters:
        - description: The unique identifier for the alert
          in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
  /binary-logs/url:
    get:
      operationId: FetchBinaryLogsUrl
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDownloadInfo'
      description: |-
        Fetches the URL to a zip file containing one or more binary log files for the requested device and time range.
        The returned URL can be used to download the zip file.

        For more information, see our [nRF Cloud documentation on binary logs](https://docs.nrfcloud.com/Devices/MessagesAndAlerts/AlertsAndLogs/AlertsOverview.html#binary-logs).
      summary: FetchBinaryLogsUrl
      tags:
        - Binary Logs
      security:
        - SimpleToken: []
      parameters:
        - in: query
          name: deviceId
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
        - description: |-
            By default, the start time for the range is 24 hours before the current time.
            The range between start and end cannot be greater than 24 hours.
          in: query
          name: start
          required: false
          schema:
            $ref: '#/components/schemas/ISODateTimeString'
        - description: |-
            By default, the end time for the range is the current time.
            The range between start and end cannot be greater than 24 hours.
          in: query
          name: end
          required: false
          schema:
            $ref: '#/components/schemas/ISODateTimeString'
x-tagGroups:
  - name: General
    tags:
      - Account
  - name: Device Management
    tags:
      - All Devices
      - Account Devices
      - IP Devices
      - Gateways
      - Bluetooth Low Energy Devices
      - Messages
      - Alerts
      - Binary Logs
  - name: Firmware Over-the-Air (FOTA) Update Service
    tags:
      - The FOTA Service
      - Firmware Bundles
      - FOTA Jobs
      - FOTA Job Executions
  - name: Location Services
    tags:
      - Assisted GPS
      - Cell Location
      - Contribute
      - Geocoding
      - GNSS
      - Ground Fix
      - Location History
      - Predicted GPS
      - Single Cell
      - Wi-Fi Location
  - name: Miscellaneous
    tags:
      - Bulk Ops Requests
servers:
  - url: /v1
tags:
  - name: Account
    description: Endpoints for account management.
  - name: All Devices
    description: Endpoints for devices that can send data to the platform, whether directly or through a gateway.
  - name: Gateways
    description: Endpoints for gateways.
  - name: Bluetooth Low Energy Devices
    description: Endpoints for Bluetooth Low Energy devices.
  - name: Account Devices
    description: Endpoints for account devices.
  - name: IP Devices
    description: Endpoints for device that have an IP address and can send messages directly to the platform.
  - name: The FOTA Service
    description: |
      Endpoints for working with the Firmware Over-the-Air (FOTA) Updates service.

      For more information see the [FOTA Service documentation](https://docs.nrfcloud.com/Devices/FirmwareUpdate/FOTAOverview.html).
  - name: FOTA Jobs
    description: |
      Endpoints for creating and interacting with FOTA Jobs.

      For more information see the [FOTA Service documentation](https://docs.nrfcloud.com/Devices/FirmwareUpdate/FOTAOverview.html).
  - name: FOTA Job Executions
    description: |
      Endpoints for interacting with individual FOTA Job Executions.

      For more information see the [FOTA Service documentation](https://docs.nrfcloud.com/Devices/FirmwareUpdate/FOTAOverview.html).
  - name: Firmware Bundles
    description: |
      Endpoints for managing your firmware bundles.

      For more information see the [FOTA Service documentation](https://docs.nrfcloud.com/Devices/FirmwareUpdate/FOTAOverview.html).
  - name: Location Services
    description: |
      The Location Service endpoints help devices quickly and efficiently know their location in the world.

      For more information see the [Location Services documentation](https://docs.nrfcloud.com/LocationServices/LSOverview.html).
  - name: Assisted GPS
    description: |
      Endpoints for retrieving assistance data, enabling a faster time-to-first-fix (TTFF) for the GPS modem.

      For more information see the [Location Services documentation](https://docs.nrfcloud.com/LocationServices/LSOverview.html).
  - name: Single Cell
    description: |
      <span></span>
  - name: Predicted GPS
    description: |
      Endpoints for retrieving up to two weeks of predicted assistance data, enabling a faster time-to-first-fix (TTFF) for the GPS modem, even when the device is offline.

      For more information see the [Location Services documentation](https://docs.nrfcloud.com/LocationServices/LSOverview.html).
  - name: Cell Location
    description: |
      Endpoints to retrieve the coarse location of the device based on the nearest cell(s).

      For more information see the [Location Services documentation](https://docs.nrfcloud.com/LocationServices/LSOverview.html).
  - name: Wi-Fi Location
    description: |
      Endpoint to retrieve the location of the device based on the nearest wi-fi access points.
  - name: GNSS
    description: |
      Endpoints for all things related to GNSS including assistance, predictions (coming soon), and reporting GNSS coordinates. 

      For more information see the [Location Services GNSS tutorial](https://docs.nrfcloud.com/LocationServices/Tutorials/GPS.html).
  - name: Ground Fix
    description: Endpoint to retrieve the location of the device based on the nearest wi-fi access points or LTE cells. You can send either or both, using the same formats as you cell/wifi endpoints. The cloud will figure out the best location. This is a good option for low power devices looking to minimize the number of requests and extend battery life.
  - name: Location History
    description: |
      Endpoint to retrieve the previous locations for a device.
  - name: Messages
    description: Endpoints for sending and retrieving messages sent to or from a device.
  - name: Bulk Ops Requests
    description: Endpoints for viewing the details and status of one or more bulk operations requests. A bulk operation request is a request to any endpoint that supports asynchronous operations, such as the <a href='/v1#operation/ProvisionDevices'>ProvisionDevices</a> endpoint.
  - name: Contribute
    description: Make a contribution to nRF Cloud Location Services database. A contribution is collection of observed LTE cells or Wi-Fi APs accompanied by a GNSS position. This will bolster our service quality for all nRF Cloud Location Services customers.
  - name: Misc.
